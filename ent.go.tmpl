{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "browse" }}

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

func NewBrowseInterface(ent *Client) *browse {
	return &browse{
		ent: ent,
	}
}

type browse struct {
	ent *Client
}

func (browse) Types() []string {
	return []string {
		{{range $node := $.Nodes}} "{{$node.Name}}",
		{{end}}
	}
}

func (browse) ConvertID(typeName string, id string) interface{} {
	switch typeName {
	{{range $node := $.Nodes}}
	case "{{$node.Name}}":
		return convertID("{{$node.ID.Type}}", id)
	{{- end}}
	default:
		panic("invalid typename: " + typeName)
	}
}

func convertID(idType string, id string) interface{} {
	switch idType{
		case "int":
			id_, err := strconv.Atoi(id)
			if err != nil {
				panic(err)
			}
			return id_
		case "int64":
			id_, err := strconv.ParseInt(id, 10, 64)
			if err != nil {
				panic(err)
			}
			return id_
		case "string":
			return id
		default:
			panic("unsupported id type: " + idType)
	}
}

func (browse) Schema(typeName string) ent.Interface {
	switch typeName {
	{{range $node := $.Nodes}}
	case "{{$node.Name}}":
		return schema.{{$node.Name}}{}
	{{end}}
	}
	return nil
}

func (b *browse) Count(ctx context.Context, entityType string) int {
	switch entityType {
    {{range $node := $.Nodes}}
	case "{{$node.Name}}":
		return b.ent.{{$node.Name}}.Query().CountX(ctx)
    {{- end -}}
	}
	panic(fmt.Errorf("unknown entity type %s", entityType))
}

func (b *browse) List(ctx context.Context, entityType string, limit, offset *int) interface{} {
	switch entityType {
    {{range $node := $.Nodes}}
	case "{{$node.Name}}":
	    query := b.ent.{{$node.Name}}.Query()
	    if limit != nil {
	        query = query.Limit(*limit)
	    }
	    if offset != nil {
	        query = query.Offset(*offset)
	    }
		return query.AllX(ctx)
    {{- end -}}
	}
	panic(fmt.Errorf("unknown entity type %s", entityType))
}

func (b *browse) Object(ctx context.Context, entityType string, entityID interface{}) interface{} {
	switch entityType {
    {{range $node := $.Nodes}}
	case "{{$node.Name}}":
		switch id := entityID.(type) {
			case {{ $node.ID.Type }}:
				return b.ent.{{$node.Name}}.Query().{{range $node.Edges}}
				With{{pascal .Name}}().{{end}}
				Where({{lower $node.Name}}.IDEQ(id)).OnlyX(ctx)
			default:
				panic(fmt.Errorf("invalid id type: %T, expecting {{ $node.ID.Type }}", id))
		}
    {{- end -}}
	}
	panic(fmt.Errorf("unknown entity type %s", entityType))
}
{{- end}}