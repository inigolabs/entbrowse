// Code generated by entc, DO NOT EDIT.

package planet

const (
	// Label holds the string label denoting the planet type in the database.
	Label = "planet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClimate holds the string denoting the climate field in the database.
	FieldClimate = "climate"
	// FieldDiameter holds the string denoting the diameter field in the database.
	FieldDiameter = "diameter"
	// FieldGravity holds the string denoting the gravity field in the database.
	FieldGravity = "gravity"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOrbitalPeriod holds the string denoting the orbital_period field in the database.
	FieldOrbitalPeriod = "orbital_period"
	// FieldPopulation holds the string denoting the population field in the database.
	FieldPopulation = "population"
	// FieldRotationPeriod holds the string denoting the rotation_period field in the database.
	FieldRotationPeriod = "rotation_period"
	// FieldSurfaceWater holds the string denoting the surface_water field in the database.
	FieldSurfaceWater = "surface_water"
	// FieldTerrain holds the string denoting the terrain field in the database.
	FieldTerrain = "terrain"
	// EdgeHomeTo holds the string denoting the home_to edge name in mutations.
	EdgeHomeTo = "home_to"
	// EdgeAppearedIn holds the string denoting the appeared_in edge name in mutations.
	EdgeAppearedIn = "appeared_in"
	// EdgeOriginOf holds the string denoting the origin_of edge name in mutations.
	EdgeOriginOf = "origin_of"
	// Table holds the table name of the planet in the database.
	Table = "planets"
	// HomeToTable is the table that holds the home_to relation/edge. The primary key declared below.
	HomeToTable = "planet_home_to"
	// HomeToInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	HomeToInverseTable = "persons"
	// AppearedInTable is the table that holds the appeared_in relation/edge. The primary key declared below.
	AppearedInTable = "film_has_planet"
	// AppearedInInverseTable is the table name for the Film entity.
	// It exists in this package in order to avoid circular dependency with the "film" package.
	AppearedInInverseTable = "films"
	// OriginOfTable is the table that holds the origin_of relation/edge. The primary key declared below.
	OriginOfTable = "species_originates_from"
	// OriginOfInverseTable is the table name for the Species entity.
	// It exists in this package in order to avoid circular dependency with the "species" package.
	OriginOfInverseTable = "species"
)

// Columns holds all SQL columns for planet fields.
var Columns = []string{
	FieldID,
	FieldClimate,
	FieldDiameter,
	FieldGravity,
	FieldName,
	FieldOrbitalPeriod,
	FieldPopulation,
	FieldRotationPeriod,
	FieldSurfaceWater,
	FieldTerrain,
}

var (
	// HomeToPrimaryKey and HomeToColumn2 are the table columns denoting the
	// primary key for the home_to relation (M2M).
	HomeToPrimaryKey = []string{"planet_id", "person_id"}
	// AppearedInPrimaryKey and AppearedInColumn2 are the table columns denoting the
	// primary key for the appeared_in relation (M2M).
	AppearedInPrimaryKey = []string{"film_id", "planet_id"}
	// OriginOfPrimaryKey and OriginOfColumn2 are the table columns denoting the
	// primary key for the origin_of relation (M2M).
	OriginOfPrimaryKey = []string{"species_id", "planet_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
