// Code generated by entc, DO NOT EDIT.

package planet

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Climate applies equality check predicate on the "climate" field. It's identical to ClimateEQ.
func Climate(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClimate), v))
	})
}

// Diameter applies equality check predicate on the "diameter" field. It's identical to DiameterEQ.
func Diameter(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiameter), v))
	})
}

// Gravity applies equality check predicate on the "gravity" field. It's identical to GravityEQ.
func Gravity(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGravity), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// OrbitalPeriod applies equality check predicate on the "orbital_period" field. It's identical to OrbitalPeriodEQ.
func OrbitalPeriod(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrbitalPeriod), v))
	})
}

// Population applies equality check predicate on the "population" field. It's identical to PopulationEQ.
func Population(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// RotationPeriod applies equality check predicate on the "rotation_period" field. It's identical to RotationPeriodEQ.
func RotationPeriod(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRotationPeriod), v))
	})
}

// SurfaceWater applies equality check predicate on the "surface_water" field. It's identical to SurfaceWaterEQ.
func SurfaceWater(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSurfaceWater), v))
	})
}

// Terrain applies equality check predicate on the "terrain" field. It's identical to TerrainEQ.
func Terrain(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerrain), v))
	})
}

// ClimateEQ applies the EQ predicate on the "climate" field.
func ClimateEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClimate), v))
	})
}

// ClimateNEQ applies the NEQ predicate on the "climate" field.
func ClimateNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClimate), v))
	})
}

// ClimateIn applies the In predicate on the "climate" field.
func ClimateIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClimate), v...))
	})
}

// ClimateNotIn applies the NotIn predicate on the "climate" field.
func ClimateNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClimate), v...))
	})
}

// ClimateGT applies the GT predicate on the "climate" field.
func ClimateGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClimate), v))
	})
}

// ClimateGTE applies the GTE predicate on the "climate" field.
func ClimateGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClimate), v))
	})
}

// ClimateLT applies the LT predicate on the "climate" field.
func ClimateLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClimate), v))
	})
}

// ClimateLTE applies the LTE predicate on the "climate" field.
func ClimateLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClimate), v))
	})
}

// ClimateContains applies the Contains predicate on the "climate" field.
func ClimateContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClimate), v))
	})
}

// ClimateHasPrefix applies the HasPrefix predicate on the "climate" field.
func ClimateHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClimate), v))
	})
}

// ClimateHasSuffix applies the HasSuffix predicate on the "climate" field.
func ClimateHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClimate), v))
	})
}

// ClimateEqualFold applies the EqualFold predicate on the "climate" field.
func ClimateEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClimate), v))
	})
}

// ClimateContainsFold applies the ContainsFold predicate on the "climate" field.
func ClimateContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClimate), v))
	})
}

// DiameterEQ applies the EQ predicate on the "diameter" field.
func DiameterEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiameter), v))
	})
}

// DiameterNEQ applies the NEQ predicate on the "diameter" field.
func DiameterNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiameter), v))
	})
}

// DiameterIn applies the In predicate on the "diameter" field.
func DiameterIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiameter), v...))
	})
}

// DiameterNotIn applies the NotIn predicate on the "diameter" field.
func DiameterNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiameter), v...))
	})
}

// DiameterGT applies the GT predicate on the "diameter" field.
func DiameterGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiameter), v))
	})
}

// DiameterGTE applies the GTE predicate on the "diameter" field.
func DiameterGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiameter), v))
	})
}

// DiameterLT applies the LT predicate on the "diameter" field.
func DiameterLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiameter), v))
	})
}

// DiameterLTE applies the LTE predicate on the "diameter" field.
func DiameterLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiameter), v))
	})
}

// DiameterIsNil applies the IsNil predicate on the "diameter" field.
func DiameterIsNil() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiameter)))
	})
}

// DiameterNotNil applies the NotNil predicate on the "diameter" field.
func DiameterNotNil() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiameter)))
	})
}

// GravityEQ applies the EQ predicate on the "gravity" field.
func GravityEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGravity), v))
	})
}

// GravityNEQ applies the NEQ predicate on the "gravity" field.
func GravityNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGravity), v))
	})
}

// GravityIn applies the In predicate on the "gravity" field.
func GravityIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGravity), v...))
	})
}

// GravityNotIn applies the NotIn predicate on the "gravity" field.
func GravityNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGravity), v...))
	})
}

// GravityGT applies the GT predicate on the "gravity" field.
func GravityGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGravity), v))
	})
}

// GravityGTE applies the GTE predicate on the "gravity" field.
func GravityGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGravity), v))
	})
}

// GravityLT applies the LT predicate on the "gravity" field.
func GravityLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGravity), v))
	})
}

// GravityLTE applies the LTE predicate on the "gravity" field.
func GravityLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGravity), v))
	})
}

// GravityContains applies the Contains predicate on the "gravity" field.
func GravityContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGravity), v))
	})
}

// GravityHasPrefix applies the HasPrefix predicate on the "gravity" field.
func GravityHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGravity), v))
	})
}

// GravityHasSuffix applies the HasSuffix predicate on the "gravity" field.
func GravityHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGravity), v))
	})
}

// GravityEqualFold applies the EqualFold predicate on the "gravity" field.
func GravityEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGravity), v))
	})
}

// GravityContainsFold applies the ContainsFold predicate on the "gravity" field.
func GravityContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGravity), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// OrbitalPeriodEQ applies the EQ predicate on the "orbital_period" field.
func OrbitalPeriodEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodNEQ applies the NEQ predicate on the "orbital_period" field.
func OrbitalPeriodNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodIn applies the In predicate on the "orbital_period" field.
func OrbitalPeriodIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrbitalPeriod), v...))
	})
}

// OrbitalPeriodNotIn applies the NotIn predicate on the "orbital_period" field.
func OrbitalPeriodNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrbitalPeriod), v...))
	})
}

// OrbitalPeriodGT applies the GT predicate on the "orbital_period" field.
func OrbitalPeriodGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodGTE applies the GTE predicate on the "orbital_period" field.
func OrbitalPeriodGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodLT applies the LT predicate on the "orbital_period" field.
func OrbitalPeriodLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodLTE applies the LTE predicate on the "orbital_period" field.
func OrbitalPeriodLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodContains applies the Contains predicate on the "orbital_period" field.
func OrbitalPeriodContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodHasPrefix applies the HasPrefix predicate on the "orbital_period" field.
func OrbitalPeriodHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodHasSuffix applies the HasSuffix predicate on the "orbital_period" field.
func OrbitalPeriodHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodEqualFold applies the EqualFold predicate on the "orbital_period" field.
func OrbitalPeriodEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrbitalPeriod), v))
	})
}

// OrbitalPeriodContainsFold applies the ContainsFold predicate on the "orbital_period" field.
func OrbitalPeriodContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrbitalPeriod), v))
	})
}

// PopulationEQ applies the EQ predicate on the "population" field.
func PopulationEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// PopulationNEQ applies the NEQ predicate on the "population" field.
func PopulationNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopulation), v))
	})
}

// PopulationIn applies the In predicate on the "population" field.
func PopulationIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPopulation), v...))
	})
}

// PopulationNotIn applies the NotIn predicate on the "population" field.
func PopulationNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPopulation), v...))
	})
}

// PopulationGT applies the GT predicate on the "population" field.
func PopulationGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopulation), v))
	})
}

// PopulationGTE applies the GTE predicate on the "population" field.
func PopulationGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopulation), v))
	})
}

// PopulationLT applies the LT predicate on the "population" field.
func PopulationLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopulation), v))
	})
}

// PopulationLTE applies the LTE predicate on the "population" field.
func PopulationLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopulation), v))
	})
}

// PopulationIsNil applies the IsNil predicate on the "population" field.
func PopulationIsNil() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPopulation)))
	})
}

// PopulationNotNil applies the NotNil predicate on the "population" field.
func PopulationNotNil() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPopulation)))
	})
}

// RotationPeriodEQ applies the EQ predicate on the "rotation_period" field.
func RotationPeriodEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodNEQ applies the NEQ predicate on the "rotation_period" field.
func RotationPeriodNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodIn applies the In predicate on the "rotation_period" field.
func RotationPeriodIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRotationPeriod), v...))
	})
}

// RotationPeriodNotIn applies the NotIn predicate on the "rotation_period" field.
func RotationPeriodNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRotationPeriod), v...))
	})
}

// RotationPeriodGT applies the GT predicate on the "rotation_period" field.
func RotationPeriodGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodGTE applies the GTE predicate on the "rotation_period" field.
func RotationPeriodGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodLT applies the LT predicate on the "rotation_period" field.
func RotationPeriodLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodLTE applies the LTE predicate on the "rotation_period" field.
func RotationPeriodLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodContains applies the Contains predicate on the "rotation_period" field.
func RotationPeriodContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodHasPrefix applies the HasPrefix predicate on the "rotation_period" field.
func RotationPeriodHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodHasSuffix applies the HasSuffix predicate on the "rotation_period" field.
func RotationPeriodHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodEqualFold applies the EqualFold predicate on the "rotation_period" field.
func RotationPeriodEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRotationPeriod), v))
	})
}

// RotationPeriodContainsFold applies the ContainsFold predicate on the "rotation_period" field.
func RotationPeriodContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRotationPeriod), v))
	})
}

// SurfaceWaterEQ applies the EQ predicate on the "surface_water" field.
func SurfaceWaterEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterNEQ applies the NEQ predicate on the "surface_water" field.
func SurfaceWaterNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterIn applies the In predicate on the "surface_water" field.
func SurfaceWaterIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSurfaceWater), v...))
	})
}

// SurfaceWaterNotIn applies the NotIn predicate on the "surface_water" field.
func SurfaceWaterNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSurfaceWater), v...))
	})
}

// SurfaceWaterGT applies the GT predicate on the "surface_water" field.
func SurfaceWaterGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterGTE applies the GTE predicate on the "surface_water" field.
func SurfaceWaterGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterLT applies the LT predicate on the "surface_water" field.
func SurfaceWaterLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterLTE applies the LTE predicate on the "surface_water" field.
func SurfaceWaterLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterContains applies the Contains predicate on the "surface_water" field.
func SurfaceWaterContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterHasPrefix applies the HasPrefix predicate on the "surface_water" field.
func SurfaceWaterHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterHasSuffix applies the HasSuffix predicate on the "surface_water" field.
func SurfaceWaterHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterEqualFold applies the EqualFold predicate on the "surface_water" field.
func SurfaceWaterEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSurfaceWater), v))
	})
}

// SurfaceWaterContainsFold applies the ContainsFold predicate on the "surface_water" field.
func SurfaceWaterContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSurfaceWater), v))
	})
}

// TerrainEQ applies the EQ predicate on the "terrain" field.
func TerrainEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerrain), v))
	})
}

// TerrainNEQ applies the NEQ predicate on the "terrain" field.
func TerrainNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTerrain), v))
	})
}

// TerrainIn applies the In predicate on the "terrain" field.
func TerrainIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTerrain), v...))
	})
}

// TerrainNotIn applies the NotIn predicate on the "terrain" field.
func TerrainNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTerrain), v...))
	})
}

// TerrainGT applies the GT predicate on the "terrain" field.
func TerrainGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTerrain), v))
	})
}

// TerrainGTE applies the GTE predicate on the "terrain" field.
func TerrainGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTerrain), v))
	})
}

// TerrainLT applies the LT predicate on the "terrain" field.
func TerrainLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTerrain), v))
	})
}

// TerrainLTE applies the LTE predicate on the "terrain" field.
func TerrainLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTerrain), v))
	})
}

// TerrainContains applies the Contains predicate on the "terrain" field.
func TerrainContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTerrain), v))
	})
}

// TerrainHasPrefix applies the HasPrefix predicate on the "terrain" field.
func TerrainHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTerrain), v))
	})
}

// TerrainHasSuffix applies the HasSuffix predicate on the "terrain" field.
func TerrainHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTerrain), v))
	})
}

// TerrainEqualFold applies the EqualFold predicate on the "terrain" field.
func TerrainEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTerrain), v))
	})
}

// TerrainContainsFold applies the ContainsFold predicate on the "terrain" field.
func TerrainContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTerrain), v))
	})
}

// HasHomeTo applies the HasEdge predicate on the "home_to" edge.
func HasHomeTo() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HomeToTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HomeToTable, HomeToPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeToWith applies the HasEdge predicate on the "home_to" edge with a given conditions (other predicates).
func HasHomeToWith(preds ...predicate.Person) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HomeToInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HomeToTable, HomeToPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppearedIn applies the HasEdge predicate on the "appeared_in" edge.
func HasAppearedIn() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppearedInTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppearedInTable, AppearedInPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppearedInWith applies the HasEdge predicate on the "appeared_in" edge with a given conditions (other predicates).
func HasAppearedInWith(preds ...predicate.Film) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppearedInInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppearedInTable, AppearedInPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginOf applies the HasEdge predicate on the "origin_of" edge.
func HasOriginOf() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginOfTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OriginOfTable, OriginOfPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginOfWith applies the HasEdge predicate on the "origin_of" edge with a given conditions (other predicates).
func HasOriginOfWith(preds ...predicate.Species) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginOfInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OriginOfTable, OriginOfPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Planet) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Planet) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Planet) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		p(s.Not())
	})
}
