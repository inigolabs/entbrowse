// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/starship"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetBirthYear sets the "birth_year" field.
func (pu *PersonUpdate) SetBirthYear(s string) *PersonUpdate {
	pu.mutation.SetBirthYear(s)
	return pu
}

// SetEyeColor sets the "eye_color" field.
func (pu *PersonUpdate) SetEyeColor(s string) *PersonUpdate {
	pu.mutation.SetEyeColor(s)
	return pu
}

// SetGender sets the "gender" field.
func (pu *PersonUpdate) SetGender(s string) *PersonUpdate {
	pu.mutation.SetGender(s)
	return pu
}

// SetHairColor sets the "hair_color" field.
func (pu *PersonUpdate) SetHairColor(s string) *PersonUpdate {
	pu.mutation.SetHairColor(s)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PersonUpdate) SetHeight(i int) *PersonUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(i)
	return pu
}

// AddHeight adds i to the "height" field.
func (pu *PersonUpdate) AddHeight(i int) *PersonUpdate {
	pu.mutation.AddHeight(i)
	return pu
}

// SetMass sets the "mass" field.
func (pu *PersonUpdate) SetMass(f float64) *PersonUpdate {
	pu.mutation.ResetMass()
	pu.mutation.SetMass(f)
	return pu
}

// SetNillableMass sets the "mass" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMass(f *float64) *PersonUpdate {
	if f != nil {
		pu.SetMass(*f)
	}
	return pu
}

// AddMass adds f to the "mass" field.
func (pu *PersonUpdate) AddMass(f float64) *PersonUpdate {
	pu.mutation.AddMass(f)
	return pu
}

// ClearMass clears the value of the "mass" field.
func (pu *PersonUpdate) ClearMass() *PersonUpdate {
	pu.mutation.ClearMass()
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetSkinColor sets the "skin_color" field.
func (pu *PersonUpdate) SetSkinColor(s string) *PersonUpdate {
	pu.mutation.SetSkinColor(s)
	return pu
}

// AddPilotedStarshipIDs adds the "piloted_starship" edge to the Starship entity by IDs.
func (pu *PersonUpdate) AddPilotedStarshipIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddPilotedStarshipIDs(ids...)
	return pu
}

// AddPilotedStarship adds the "piloted_starship" edges to the Starship entity.
func (pu *PersonUpdate) AddPilotedStarship(s ...*Starship) *PersonUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddPilotedStarshipIDs(ids...)
}

// AddPilotedVehicleIDs adds the "piloted_vehicle" edge to the Vehicle entity by IDs.
func (pu *PersonUpdate) AddPilotedVehicleIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddPilotedVehicleIDs(ids...)
	return pu
}

// AddPilotedVehicle adds the "piloted_vehicle" edges to the Vehicle entity.
func (pu *PersonUpdate) AddPilotedVehicle(v ...*Vehicle) *PersonUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddPilotedVehicleIDs(ids...)
}

// AddIsOfTypeIDs adds the "is_of_type" edge to the Species entity by IDs.
func (pu *PersonUpdate) AddIsOfTypeIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddIsOfTypeIDs(ids...)
	return pu
}

// AddIsOfType adds the "is_of_type" edges to the Species entity.
func (pu *PersonUpdate) AddIsOfType(s ...*Species) *PersonUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddIsOfTypeIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (pu *PersonUpdate) AddAppearedInIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddAppearedInIDs(ids...)
	return pu
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (pu *PersonUpdate) AddAppearedIn(f ...*Film) *PersonUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddAppearedInIDs(ids...)
}

// AddFromPlanetIDs adds the "from_planet" edge to the Planet entity by IDs.
func (pu *PersonUpdate) AddFromPlanetIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddFromPlanetIDs(ids...)
	return pu
}

// AddFromPlanet adds the "from_planet" edges to the Planet entity.
func (pu *PersonUpdate) AddFromPlanet(p ...*Planet) *PersonUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddFromPlanetIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearPilotedStarship clears all "piloted_starship" edges to the Starship entity.
func (pu *PersonUpdate) ClearPilotedStarship() *PersonUpdate {
	pu.mutation.ClearPilotedStarship()
	return pu
}

// RemovePilotedStarshipIDs removes the "piloted_starship" edge to Starship entities by IDs.
func (pu *PersonUpdate) RemovePilotedStarshipIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemovePilotedStarshipIDs(ids...)
	return pu
}

// RemovePilotedStarship removes "piloted_starship" edges to Starship entities.
func (pu *PersonUpdate) RemovePilotedStarship(s ...*Starship) *PersonUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemovePilotedStarshipIDs(ids...)
}

// ClearPilotedVehicle clears all "piloted_vehicle" edges to the Vehicle entity.
func (pu *PersonUpdate) ClearPilotedVehicle() *PersonUpdate {
	pu.mutation.ClearPilotedVehicle()
	return pu
}

// RemovePilotedVehicleIDs removes the "piloted_vehicle" edge to Vehicle entities by IDs.
func (pu *PersonUpdate) RemovePilotedVehicleIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemovePilotedVehicleIDs(ids...)
	return pu
}

// RemovePilotedVehicle removes "piloted_vehicle" edges to Vehicle entities.
func (pu *PersonUpdate) RemovePilotedVehicle(v ...*Vehicle) *PersonUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemovePilotedVehicleIDs(ids...)
}

// ClearIsOfType clears all "is_of_type" edges to the Species entity.
func (pu *PersonUpdate) ClearIsOfType() *PersonUpdate {
	pu.mutation.ClearIsOfType()
	return pu
}

// RemoveIsOfTypeIDs removes the "is_of_type" edge to Species entities by IDs.
func (pu *PersonUpdate) RemoveIsOfTypeIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveIsOfTypeIDs(ids...)
	return pu
}

// RemoveIsOfType removes "is_of_type" edges to Species entities.
func (pu *PersonUpdate) RemoveIsOfType(s ...*Species) *PersonUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveIsOfTypeIDs(ids...)
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (pu *PersonUpdate) ClearAppearedIn() *PersonUpdate {
	pu.mutation.ClearAppearedIn()
	return pu
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (pu *PersonUpdate) RemoveAppearedInIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveAppearedInIDs(ids...)
	return pu
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (pu *PersonUpdate) RemoveAppearedIn(f ...*Film) *PersonUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveAppearedInIDs(ids...)
}

// ClearFromPlanet clears all "from_planet" edges to the Planet entity.
func (pu *PersonUpdate) ClearFromPlanet() *PersonUpdate {
	pu.mutation.ClearFromPlanet()
	return pu
}

// RemoveFromPlanetIDs removes the "from_planet" edge to Planet entities by IDs.
func (pu *PersonUpdate) RemoveFromPlanetIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveFromPlanetIDs(ids...)
	return pu
}

// RemoveFromPlanet removes "from_planet" edges to Planet entities.
func (pu *PersonUpdate) RemoveFromPlanet(p ...*Planet) *PersonUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveFromPlanetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBirthYear,
		})
	}
	if value, ok := pu.mutation.EyeColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldEyeColor,
		})
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldGender,
		})
	}
	if value, ok := pu.mutation.HairColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldHairColor,
		})
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if value, ok := pu.mutation.Mass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldMass,
		})
	}
	if value, ok := pu.mutation.AddedMass(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldMass,
		})
	}
	if pu.mutation.MassCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldMass,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := pu.mutation.SkinColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSkinColor,
		})
	}
	if pu.mutation.PilotedStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedStarshipTable,
			Columns: person.PilotedStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPilotedStarshipIDs(); len(nodes) > 0 && !pu.mutation.PilotedStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedStarshipTable,
			Columns: person.PilotedStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PilotedStarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedStarshipTable,
			Columns: person.PilotedStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PilotedVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedVehicleTable,
			Columns: person.PilotedVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPilotedVehicleIDs(); len(nodes) > 0 && !pu.mutation.PilotedVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedVehicleTable,
			Columns: person.PilotedVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PilotedVehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedVehicleTable,
			Columns: person.PilotedVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.IsOfTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.IsOfTypeTable,
			Columns: person.IsOfTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedIsOfTypeIDs(); len(nodes) > 0 && !pu.mutation.IsOfTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.IsOfTypeTable,
			Columns: person.IsOfTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.IsOfTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.IsOfTypeTable,
			Columns: person.IsOfTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AppearedInTable,
			Columns: person.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !pu.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AppearedInTable,
			Columns: person.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AppearedInTable,
			Columns: person.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FromPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.FromPlanetTable,
			Columns: person.FromPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFromPlanetIDs(); len(nodes) > 0 && !pu.mutation.FromPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.FromPlanetTable,
			Columns: person.FromPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FromPlanetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.FromPlanetTable,
			Columns: person.FromPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetBirthYear sets the "birth_year" field.
func (puo *PersonUpdateOne) SetBirthYear(s string) *PersonUpdateOne {
	puo.mutation.SetBirthYear(s)
	return puo
}

// SetEyeColor sets the "eye_color" field.
func (puo *PersonUpdateOne) SetEyeColor(s string) *PersonUpdateOne {
	puo.mutation.SetEyeColor(s)
	return puo
}

// SetGender sets the "gender" field.
func (puo *PersonUpdateOne) SetGender(s string) *PersonUpdateOne {
	puo.mutation.SetGender(s)
	return puo
}

// SetHairColor sets the "hair_color" field.
func (puo *PersonUpdateOne) SetHairColor(s string) *PersonUpdateOne {
	puo.mutation.SetHairColor(s)
	return puo
}

// SetHeight sets the "height" field.
func (puo *PersonUpdateOne) SetHeight(i int) *PersonUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(i)
	return puo
}

// AddHeight adds i to the "height" field.
func (puo *PersonUpdateOne) AddHeight(i int) *PersonUpdateOne {
	puo.mutation.AddHeight(i)
	return puo
}

// SetMass sets the "mass" field.
func (puo *PersonUpdateOne) SetMass(f float64) *PersonUpdateOne {
	puo.mutation.ResetMass()
	puo.mutation.SetMass(f)
	return puo
}

// SetNillableMass sets the "mass" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMass(f *float64) *PersonUpdateOne {
	if f != nil {
		puo.SetMass(*f)
	}
	return puo
}

// AddMass adds f to the "mass" field.
func (puo *PersonUpdateOne) AddMass(f float64) *PersonUpdateOne {
	puo.mutation.AddMass(f)
	return puo
}

// ClearMass clears the value of the "mass" field.
func (puo *PersonUpdateOne) ClearMass() *PersonUpdateOne {
	puo.mutation.ClearMass()
	return puo
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetSkinColor sets the "skin_color" field.
func (puo *PersonUpdateOne) SetSkinColor(s string) *PersonUpdateOne {
	puo.mutation.SetSkinColor(s)
	return puo
}

// AddPilotedStarshipIDs adds the "piloted_starship" edge to the Starship entity by IDs.
func (puo *PersonUpdateOne) AddPilotedStarshipIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddPilotedStarshipIDs(ids...)
	return puo
}

// AddPilotedStarship adds the "piloted_starship" edges to the Starship entity.
func (puo *PersonUpdateOne) AddPilotedStarship(s ...*Starship) *PersonUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddPilotedStarshipIDs(ids...)
}

// AddPilotedVehicleIDs adds the "piloted_vehicle" edge to the Vehicle entity by IDs.
func (puo *PersonUpdateOne) AddPilotedVehicleIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddPilotedVehicleIDs(ids...)
	return puo
}

// AddPilotedVehicle adds the "piloted_vehicle" edges to the Vehicle entity.
func (puo *PersonUpdateOne) AddPilotedVehicle(v ...*Vehicle) *PersonUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddPilotedVehicleIDs(ids...)
}

// AddIsOfTypeIDs adds the "is_of_type" edge to the Species entity by IDs.
func (puo *PersonUpdateOne) AddIsOfTypeIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddIsOfTypeIDs(ids...)
	return puo
}

// AddIsOfType adds the "is_of_type" edges to the Species entity.
func (puo *PersonUpdateOne) AddIsOfType(s ...*Species) *PersonUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddIsOfTypeIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (puo *PersonUpdateOne) AddAppearedInIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddAppearedInIDs(ids...)
	return puo
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (puo *PersonUpdateOne) AddAppearedIn(f ...*Film) *PersonUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddAppearedInIDs(ids...)
}

// AddFromPlanetIDs adds the "from_planet" edge to the Planet entity by IDs.
func (puo *PersonUpdateOne) AddFromPlanetIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddFromPlanetIDs(ids...)
	return puo
}

// AddFromPlanet adds the "from_planet" edges to the Planet entity.
func (puo *PersonUpdateOne) AddFromPlanet(p ...*Planet) *PersonUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddFromPlanetIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearPilotedStarship clears all "piloted_starship" edges to the Starship entity.
func (puo *PersonUpdateOne) ClearPilotedStarship() *PersonUpdateOne {
	puo.mutation.ClearPilotedStarship()
	return puo
}

// RemovePilotedStarshipIDs removes the "piloted_starship" edge to Starship entities by IDs.
func (puo *PersonUpdateOne) RemovePilotedStarshipIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemovePilotedStarshipIDs(ids...)
	return puo
}

// RemovePilotedStarship removes "piloted_starship" edges to Starship entities.
func (puo *PersonUpdateOne) RemovePilotedStarship(s ...*Starship) *PersonUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemovePilotedStarshipIDs(ids...)
}

// ClearPilotedVehicle clears all "piloted_vehicle" edges to the Vehicle entity.
func (puo *PersonUpdateOne) ClearPilotedVehicle() *PersonUpdateOne {
	puo.mutation.ClearPilotedVehicle()
	return puo
}

// RemovePilotedVehicleIDs removes the "piloted_vehicle" edge to Vehicle entities by IDs.
func (puo *PersonUpdateOne) RemovePilotedVehicleIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemovePilotedVehicleIDs(ids...)
	return puo
}

// RemovePilotedVehicle removes "piloted_vehicle" edges to Vehicle entities.
func (puo *PersonUpdateOne) RemovePilotedVehicle(v ...*Vehicle) *PersonUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemovePilotedVehicleIDs(ids...)
}

// ClearIsOfType clears all "is_of_type" edges to the Species entity.
func (puo *PersonUpdateOne) ClearIsOfType() *PersonUpdateOne {
	puo.mutation.ClearIsOfType()
	return puo
}

// RemoveIsOfTypeIDs removes the "is_of_type" edge to Species entities by IDs.
func (puo *PersonUpdateOne) RemoveIsOfTypeIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveIsOfTypeIDs(ids...)
	return puo
}

// RemoveIsOfType removes "is_of_type" edges to Species entities.
func (puo *PersonUpdateOne) RemoveIsOfType(s ...*Species) *PersonUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveIsOfTypeIDs(ids...)
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (puo *PersonUpdateOne) ClearAppearedIn() *PersonUpdateOne {
	puo.mutation.ClearAppearedIn()
	return puo
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (puo *PersonUpdateOne) RemoveAppearedInIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveAppearedInIDs(ids...)
	return puo
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (puo *PersonUpdateOne) RemoveAppearedIn(f ...*Film) *PersonUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveAppearedInIDs(ids...)
}

// ClearFromPlanet clears all "from_planet" edges to the Planet entity.
func (puo *PersonUpdateOne) ClearFromPlanet() *PersonUpdateOne {
	puo.mutation.ClearFromPlanet()
	return puo
}

// RemoveFromPlanetIDs removes the "from_planet" edge to Planet entities by IDs.
func (puo *PersonUpdateOne) RemoveFromPlanetIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveFromPlanetIDs(ids...)
	return puo
}

// RemoveFromPlanet removes "from_planet" edges to Planet entities.
func (puo *PersonUpdateOne) RemoveFromPlanet(p ...*Planet) *PersonUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveFromPlanetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBirthYear,
		})
	}
	if value, ok := puo.mutation.EyeColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldEyeColor,
		})
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldGender,
		})
	}
	if value, ok := puo.mutation.HairColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldHairColor,
		})
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if value, ok := puo.mutation.Mass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldMass,
		})
	}
	if value, ok := puo.mutation.AddedMass(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldMass,
		})
	}
	if puo.mutation.MassCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldMass,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := puo.mutation.SkinColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSkinColor,
		})
	}
	if puo.mutation.PilotedStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedStarshipTable,
			Columns: person.PilotedStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPilotedStarshipIDs(); len(nodes) > 0 && !puo.mutation.PilotedStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedStarshipTable,
			Columns: person.PilotedStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PilotedStarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedStarshipTable,
			Columns: person.PilotedStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PilotedVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedVehicleTable,
			Columns: person.PilotedVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPilotedVehicleIDs(); len(nodes) > 0 && !puo.mutation.PilotedVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedVehicleTable,
			Columns: person.PilotedVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PilotedVehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.PilotedVehicleTable,
			Columns: person.PilotedVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.IsOfTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.IsOfTypeTable,
			Columns: person.IsOfTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedIsOfTypeIDs(); len(nodes) > 0 && !puo.mutation.IsOfTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.IsOfTypeTable,
			Columns: person.IsOfTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.IsOfTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.IsOfTypeTable,
			Columns: person.IsOfTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AppearedInTable,
			Columns: person.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !puo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AppearedInTable,
			Columns: person.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AppearedInTable,
			Columns: person.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FromPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.FromPlanetTable,
			Columns: person.FromPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFromPlanetIDs(); len(nodes) > 0 && !puo.mutation.FromPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.FromPlanetTable,
			Columns: person.FromPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FromPlanetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.FromPlanetTable,
			Columns: person.FromPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
