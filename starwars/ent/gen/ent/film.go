// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
)

// Film is the model entity for the Film schema.
type Film struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Director holds the value of the "director" field.
	Director string `json:"director,omitempty"`
	// EpisodeID holds the value of the "episode_id" field.
	EpisodeID int `json:"episode_id,omitempty"`
	// OpeningCrawl holds the value of the "opening_crawl" field.
	OpeningCrawl string `json:"opening_crawl,omitempty"`
	// Producer holds the value of the "producer" field.
	Producer string `json:"producer,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilmQuery when eager-loading is set.
	Edges FilmEdges `json:"edges"`
}

// FilmEdges holds the relations/edges for other nodes in the graph.
type FilmEdges struct {
	// HasPerson holds the value of the has_person edge.
	HasPerson []*Person `json:"has_person,omitempty"`
	// HasPlanet holds the value of the has_planet edge.
	HasPlanet []*Planet `json:"has_planet,omitempty"`
	// HasStarship holds the value of the has_starship edge.
	HasStarship []*Starship `json:"has_starship,omitempty"`
	// HasVehicle holds the value of the has_vehicle edge.
	HasVehicle []*Vehicle `json:"has_vehicle,omitempty"`
	// HasSpecies holds the value of the has_species edge.
	HasSpecies []*Species `json:"has_species,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// HasPersonOrErr returns the HasPerson value or an error if the edge
// was not loaded in eager-loading.
func (e FilmEdges) HasPersonOrErr() ([]*Person, error) {
	if e.loadedTypes[0] {
		return e.HasPerson, nil
	}
	return nil, &NotLoadedError{edge: "has_person"}
}

// HasPlanetOrErr returns the HasPlanet value or an error if the edge
// was not loaded in eager-loading.
func (e FilmEdges) HasPlanetOrErr() ([]*Planet, error) {
	if e.loadedTypes[1] {
		return e.HasPlanet, nil
	}
	return nil, &NotLoadedError{edge: "has_planet"}
}

// HasStarshipOrErr returns the HasStarship value or an error if the edge
// was not loaded in eager-loading.
func (e FilmEdges) HasStarshipOrErr() ([]*Starship, error) {
	if e.loadedTypes[2] {
		return e.HasStarship, nil
	}
	return nil, &NotLoadedError{edge: "has_starship"}
}

// HasVehicleOrErr returns the HasVehicle value or an error if the edge
// was not loaded in eager-loading.
func (e FilmEdges) HasVehicleOrErr() ([]*Vehicle, error) {
	if e.loadedTypes[3] {
		return e.HasVehicle, nil
	}
	return nil, &NotLoadedError{edge: "has_vehicle"}
}

// HasSpeciesOrErr returns the HasSpecies value or an error if the edge
// was not loaded in eager-loading.
func (e FilmEdges) HasSpeciesOrErr() ([]*Species, error) {
	if e.loadedTypes[4] {
		return e.HasSpecies, nil
	}
	return nil, &NotLoadedError{edge: "has_species"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Film) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case film.FieldID, film.FieldEpisodeID:
			values[i] = new(sql.NullInt64)
		case film.FieldDirector, film.FieldOpeningCrawl, film.FieldProducer, film.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Film", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Film fields.
func (f *Film) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case film.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case film.FieldDirector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field director", values[i])
			} else if value.Valid {
				f.Director = value.String
			}
		case film.FieldEpisodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episode_id", values[i])
			} else if value.Valid {
				f.EpisodeID = int(value.Int64)
			}
		case film.FieldOpeningCrawl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field opening_crawl", values[i])
			} else if value.Valid {
				f.OpeningCrawl = value.String
			}
		case film.FieldProducer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field producer", values[i])
			} else if value.Valid {
				f.Producer = value.String
			}
		case film.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		}
	}
	return nil
}

// QueryHasPerson queries the "has_person" edge of the Film entity.
func (f *Film) QueryHasPerson() *PersonQuery {
	return (&FilmClient{config: f.config}).QueryHasPerson(f)
}

// QueryHasPlanet queries the "has_planet" edge of the Film entity.
func (f *Film) QueryHasPlanet() *PlanetQuery {
	return (&FilmClient{config: f.config}).QueryHasPlanet(f)
}

// QueryHasStarship queries the "has_starship" edge of the Film entity.
func (f *Film) QueryHasStarship() *StarshipQuery {
	return (&FilmClient{config: f.config}).QueryHasStarship(f)
}

// QueryHasVehicle queries the "has_vehicle" edge of the Film entity.
func (f *Film) QueryHasVehicle() *VehicleQuery {
	return (&FilmClient{config: f.config}).QueryHasVehicle(f)
}

// QueryHasSpecies queries the "has_species" edge of the Film entity.
func (f *Film) QueryHasSpecies() *SpeciesQuery {
	return (&FilmClient{config: f.config}).QueryHasSpecies(f)
}

// Update returns a builder for updating this Film.
// Note that you need to call Film.Unwrap() before calling this method if this Film
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Film) Update() *FilmUpdateOne {
	return (&FilmClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Film entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Film) Unwrap() *Film {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Film is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Film) String() string {
	var builder strings.Builder
	builder.WriteString("Film(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", director=")
	builder.WriteString(f.Director)
	builder.WriteString(", episode_id=")
	builder.WriteString(fmt.Sprintf("%v", f.EpisodeID))
	builder.WriteString(", opening_crawl=")
	builder.WriteString(f.OpeningCrawl)
	builder.WriteString(", producer=")
	builder.WriteString(f.Producer)
	builder.WriteString(", title=")
	builder.WriteString(f.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Films is a parsable slice of Film.
type Films []*Film

func (f Films) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
