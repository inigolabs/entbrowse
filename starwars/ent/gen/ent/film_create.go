// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/starship"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
)

// FilmCreate is the builder for creating a Film entity.
type FilmCreate struct {
	config
	mutation *FilmMutation
	hooks    []Hook
}

// SetDirector sets the "director" field.
func (fc *FilmCreate) SetDirector(s string) *FilmCreate {
	fc.mutation.SetDirector(s)
	return fc
}

// SetEpisodeID sets the "episode_id" field.
func (fc *FilmCreate) SetEpisodeID(i int) *FilmCreate {
	fc.mutation.SetEpisodeID(i)
	return fc
}

// SetOpeningCrawl sets the "opening_crawl" field.
func (fc *FilmCreate) SetOpeningCrawl(s string) *FilmCreate {
	fc.mutation.SetOpeningCrawl(s)
	return fc
}

// SetProducer sets the "producer" field.
func (fc *FilmCreate) SetProducer(s string) *FilmCreate {
	fc.mutation.SetProducer(s)
	return fc
}

// SetTitle sets the "title" field.
func (fc *FilmCreate) SetTitle(s string) *FilmCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// AddHasPersonIDs adds the "has_person" edge to the Person entity by IDs.
func (fc *FilmCreate) AddHasPersonIDs(ids ...int) *FilmCreate {
	fc.mutation.AddHasPersonIDs(ids...)
	return fc
}

// AddHasPerson adds the "has_person" edges to the Person entity.
func (fc *FilmCreate) AddHasPerson(p ...*Person) *FilmCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddHasPersonIDs(ids...)
}

// AddHasPlanetIDs adds the "has_planet" edge to the Planet entity by IDs.
func (fc *FilmCreate) AddHasPlanetIDs(ids ...int) *FilmCreate {
	fc.mutation.AddHasPlanetIDs(ids...)
	return fc
}

// AddHasPlanet adds the "has_planet" edges to the Planet entity.
func (fc *FilmCreate) AddHasPlanet(p ...*Planet) *FilmCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddHasPlanetIDs(ids...)
}

// AddHasStarshipIDs adds the "has_starship" edge to the Starship entity by IDs.
func (fc *FilmCreate) AddHasStarshipIDs(ids ...int) *FilmCreate {
	fc.mutation.AddHasStarshipIDs(ids...)
	return fc
}

// AddHasStarship adds the "has_starship" edges to the Starship entity.
func (fc *FilmCreate) AddHasStarship(s ...*Starship) *FilmCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fc.AddHasStarshipIDs(ids...)
}

// AddHasVehicleIDs adds the "has_vehicle" edge to the Vehicle entity by IDs.
func (fc *FilmCreate) AddHasVehicleIDs(ids ...int) *FilmCreate {
	fc.mutation.AddHasVehicleIDs(ids...)
	return fc
}

// AddHasVehicle adds the "has_vehicle" edges to the Vehicle entity.
func (fc *FilmCreate) AddHasVehicle(v ...*Vehicle) *FilmCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fc.AddHasVehicleIDs(ids...)
}

// AddHasSpecyIDs adds the "has_species" edge to the Species entity by IDs.
func (fc *FilmCreate) AddHasSpecyIDs(ids ...int) *FilmCreate {
	fc.mutation.AddHasSpecyIDs(ids...)
	return fc
}

// AddHasSpecies adds the "has_species" edges to the Species entity.
func (fc *FilmCreate) AddHasSpecies(s ...*Species) *FilmCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fc.AddHasSpecyIDs(ids...)
}

// Mutation returns the FilmMutation object of the builder.
func (fc *FilmCreate) Mutation() *FilmMutation {
	return fc.mutation
}

// Save creates the Film in the database.
func (fc *FilmCreate) Save(ctx context.Context) (*Film, error) {
	var (
		err  error
		node *Film
	)
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilmCreate) SaveX(ctx context.Context) *Film {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FilmCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FilmCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FilmCreate) check() error {
	if _, ok := fc.mutation.Director(); !ok {
		return &ValidationError{Name: "director", err: errors.New(`ent: missing required field "Film.director"`)}
	}
	if _, ok := fc.mutation.EpisodeID(); !ok {
		return &ValidationError{Name: "episode_id", err: errors.New(`ent: missing required field "Film.episode_id"`)}
	}
	if _, ok := fc.mutation.OpeningCrawl(); !ok {
		return &ValidationError{Name: "opening_crawl", err: errors.New(`ent: missing required field "Film.opening_crawl"`)}
	}
	if _, ok := fc.mutation.Producer(); !ok {
		return &ValidationError{Name: "producer", err: errors.New(`ent: missing required field "Film.producer"`)}
	}
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Film.title"`)}
	}
	return nil
}

func (fc *FilmCreate) sqlSave(ctx context.Context) (*Film, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fc *FilmCreate) createSpec() (*Film, *sqlgraph.CreateSpec) {
	var (
		_node = &Film{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: film.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: film.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.Director(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldDirector,
		})
		_node.Director = value
	}
	if value, ok := fc.mutation.EpisodeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: film.FieldEpisodeID,
		})
		_node.EpisodeID = value
	}
	if value, ok := fc.mutation.OpeningCrawl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldOpeningCrawl,
		})
		_node.OpeningCrawl = value
	}
	if value, ok := fc.mutation.Producer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldProducer,
		})
		_node.Producer = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldTitle,
		})
		_node.Title = value
	}
	if nodes := fc.mutation.HasPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.HasPlanetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.HasStarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.HasVehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.HasSpeciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FilmCreateBulk is the builder for creating many Film entities in bulk.
type FilmCreateBulk struct {
	config
	builders []*FilmCreate
}

// Save creates the Film entities in the database.
func (fcb *FilmCreateBulk) Save(ctx context.Context) ([]*Film, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Film, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilmMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FilmCreateBulk) SaveX(ctx context.Context) []*Film {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FilmCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FilmCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
