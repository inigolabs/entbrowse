// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
)

// PlanetUpdate is the builder for updating Planet entities.
type PlanetUpdate struct {
	config
	hooks    []Hook
	mutation *PlanetMutation
}

// Where appends a list predicates to the PlanetUpdate builder.
func (pu *PlanetUpdate) Where(ps ...predicate.Planet) *PlanetUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetClimate sets the "climate" field.
func (pu *PlanetUpdate) SetClimate(s string) *PlanetUpdate {
	pu.mutation.SetClimate(s)
	return pu
}

// SetDiameter sets the "diameter" field.
func (pu *PlanetUpdate) SetDiameter(i int) *PlanetUpdate {
	pu.mutation.ResetDiameter()
	pu.mutation.SetDiameter(i)
	return pu
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableDiameter(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetDiameter(*i)
	}
	return pu
}

// AddDiameter adds i to the "diameter" field.
func (pu *PlanetUpdate) AddDiameter(i int) *PlanetUpdate {
	pu.mutation.AddDiameter(i)
	return pu
}

// ClearDiameter clears the value of the "diameter" field.
func (pu *PlanetUpdate) ClearDiameter() *PlanetUpdate {
	pu.mutation.ClearDiameter()
	return pu
}

// SetGravity sets the "gravity" field.
func (pu *PlanetUpdate) SetGravity(s string) *PlanetUpdate {
	pu.mutation.SetGravity(s)
	return pu
}

// SetName sets the "name" field.
func (pu *PlanetUpdate) SetName(s string) *PlanetUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetOrbitalPeriod sets the "orbital_period" field.
func (pu *PlanetUpdate) SetOrbitalPeriod(s string) *PlanetUpdate {
	pu.mutation.SetOrbitalPeriod(s)
	return pu
}

// SetPopulation sets the "population" field.
func (pu *PlanetUpdate) SetPopulation(i int) *PlanetUpdate {
	pu.mutation.ResetPopulation()
	pu.mutation.SetPopulation(i)
	return pu
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulation(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetPopulation(*i)
	}
	return pu
}

// AddPopulation adds i to the "population" field.
func (pu *PlanetUpdate) AddPopulation(i int) *PlanetUpdate {
	pu.mutation.AddPopulation(i)
	return pu
}

// ClearPopulation clears the value of the "population" field.
func (pu *PlanetUpdate) ClearPopulation() *PlanetUpdate {
	pu.mutation.ClearPopulation()
	return pu
}

// SetRotationPeriod sets the "rotation_period" field.
func (pu *PlanetUpdate) SetRotationPeriod(s string) *PlanetUpdate {
	pu.mutation.SetRotationPeriod(s)
	return pu
}

// SetSurfaceWater sets the "surface_water" field.
func (pu *PlanetUpdate) SetSurfaceWater(s string) *PlanetUpdate {
	pu.mutation.SetSurfaceWater(s)
	return pu
}

// SetTerrain sets the "terrain" field.
func (pu *PlanetUpdate) SetTerrain(s string) *PlanetUpdate {
	pu.mutation.SetTerrain(s)
	return pu
}

// AddHomeToIDs adds the "home_to" edge to the Person entity by IDs.
func (pu *PlanetUpdate) AddHomeToIDs(ids ...int) *PlanetUpdate {
	pu.mutation.AddHomeToIDs(ids...)
	return pu
}

// AddHomeTo adds the "home_to" edges to the Person entity.
func (pu *PlanetUpdate) AddHomeTo(p ...*Person) *PlanetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddHomeToIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (pu *PlanetUpdate) AddAppearedInIDs(ids ...int) *PlanetUpdate {
	pu.mutation.AddAppearedInIDs(ids...)
	return pu
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (pu *PlanetUpdate) AddAppearedIn(f ...*Film) *PlanetUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddAppearedInIDs(ids...)
}

// AddOriginOfIDs adds the "origin_of" edge to the Species entity by IDs.
func (pu *PlanetUpdate) AddOriginOfIDs(ids ...int) *PlanetUpdate {
	pu.mutation.AddOriginOfIDs(ids...)
	return pu
}

// AddOriginOf adds the "origin_of" edges to the Species entity.
func (pu *PlanetUpdate) AddOriginOf(s ...*Species) *PlanetUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddOriginOfIDs(ids...)
}

// Mutation returns the PlanetMutation object of the builder.
func (pu *PlanetUpdate) Mutation() *PlanetMutation {
	return pu.mutation
}

// ClearHomeTo clears all "home_to" edges to the Person entity.
func (pu *PlanetUpdate) ClearHomeTo() *PlanetUpdate {
	pu.mutation.ClearHomeTo()
	return pu
}

// RemoveHomeToIDs removes the "home_to" edge to Person entities by IDs.
func (pu *PlanetUpdate) RemoveHomeToIDs(ids ...int) *PlanetUpdate {
	pu.mutation.RemoveHomeToIDs(ids...)
	return pu
}

// RemoveHomeTo removes "home_to" edges to Person entities.
func (pu *PlanetUpdate) RemoveHomeTo(p ...*Person) *PlanetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveHomeToIDs(ids...)
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (pu *PlanetUpdate) ClearAppearedIn() *PlanetUpdate {
	pu.mutation.ClearAppearedIn()
	return pu
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (pu *PlanetUpdate) RemoveAppearedInIDs(ids ...int) *PlanetUpdate {
	pu.mutation.RemoveAppearedInIDs(ids...)
	return pu
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (pu *PlanetUpdate) RemoveAppearedIn(f ...*Film) *PlanetUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveAppearedInIDs(ids...)
}

// ClearOriginOf clears all "origin_of" edges to the Species entity.
func (pu *PlanetUpdate) ClearOriginOf() *PlanetUpdate {
	pu.mutation.ClearOriginOf()
	return pu
}

// RemoveOriginOfIDs removes the "origin_of" edge to Species entities by IDs.
func (pu *PlanetUpdate) RemoveOriginOfIDs(ids ...int) *PlanetUpdate {
	pu.mutation.RemoveOriginOfIDs(ids...)
	return pu
}

// RemoveOriginOf removes "origin_of" edges to Species entities.
func (pu *PlanetUpdate) RemoveOriginOf(s ...*Species) *PlanetUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveOriginOfIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planet.Table,
			Columns: planet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Climate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldClimate,
		})
	}
	if value, ok := pu.mutation.Diameter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldDiameter,
		})
	}
	if value, ok := pu.mutation.AddedDiameter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldDiameter,
		})
	}
	if pu.mutation.DiameterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: planet.FieldDiameter,
		})
	}
	if value, ok := pu.mutation.Gravity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldGravity,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldName,
		})
	}
	if value, ok := pu.mutation.OrbitalPeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldOrbitalPeriod,
		})
	}
	if value, ok := pu.mutation.Population(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := pu.mutation.AddedPopulation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if pu.mutation.PopulationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := pu.mutation.RotationPeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldRotationPeriod,
		})
	}
	if value, ok := pu.mutation.SurfaceWater(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldSurfaceWater,
		})
	}
	if value, ok := pu.mutation.Terrain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldTerrain,
		})
	}
	if pu.mutation.HomeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedHomeToIDs(); len(nodes) > 0 && !pu.mutation.HomeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.HomeToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !pu.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OriginOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOriginOfIDs(); len(nodes) > 0 && !pu.mutation.OriginOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OriginOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PlanetUpdateOne is the builder for updating a single Planet entity.
type PlanetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanetMutation
}

// SetClimate sets the "climate" field.
func (puo *PlanetUpdateOne) SetClimate(s string) *PlanetUpdateOne {
	puo.mutation.SetClimate(s)
	return puo
}

// SetDiameter sets the "diameter" field.
func (puo *PlanetUpdateOne) SetDiameter(i int) *PlanetUpdateOne {
	puo.mutation.ResetDiameter()
	puo.mutation.SetDiameter(i)
	return puo
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableDiameter(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetDiameter(*i)
	}
	return puo
}

// AddDiameter adds i to the "diameter" field.
func (puo *PlanetUpdateOne) AddDiameter(i int) *PlanetUpdateOne {
	puo.mutation.AddDiameter(i)
	return puo
}

// ClearDiameter clears the value of the "diameter" field.
func (puo *PlanetUpdateOne) ClearDiameter() *PlanetUpdateOne {
	puo.mutation.ClearDiameter()
	return puo
}

// SetGravity sets the "gravity" field.
func (puo *PlanetUpdateOne) SetGravity(s string) *PlanetUpdateOne {
	puo.mutation.SetGravity(s)
	return puo
}

// SetName sets the "name" field.
func (puo *PlanetUpdateOne) SetName(s string) *PlanetUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetOrbitalPeriod sets the "orbital_period" field.
func (puo *PlanetUpdateOne) SetOrbitalPeriod(s string) *PlanetUpdateOne {
	puo.mutation.SetOrbitalPeriod(s)
	return puo
}

// SetPopulation sets the "population" field.
func (puo *PlanetUpdateOne) SetPopulation(i int) *PlanetUpdateOne {
	puo.mutation.ResetPopulation()
	puo.mutation.SetPopulation(i)
	return puo
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulation(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulation(*i)
	}
	return puo
}

// AddPopulation adds i to the "population" field.
func (puo *PlanetUpdateOne) AddPopulation(i int) *PlanetUpdateOne {
	puo.mutation.AddPopulation(i)
	return puo
}

// ClearPopulation clears the value of the "population" field.
func (puo *PlanetUpdateOne) ClearPopulation() *PlanetUpdateOne {
	puo.mutation.ClearPopulation()
	return puo
}

// SetRotationPeriod sets the "rotation_period" field.
func (puo *PlanetUpdateOne) SetRotationPeriod(s string) *PlanetUpdateOne {
	puo.mutation.SetRotationPeriod(s)
	return puo
}

// SetSurfaceWater sets the "surface_water" field.
func (puo *PlanetUpdateOne) SetSurfaceWater(s string) *PlanetUpdateOne {
	puo.mutation.SetSurfaceWater(s)
	return puo
}

// SetTerrain sets the "terrain" field.
func (puo *PlanetUpdateOne) SetTerrain(s string) *PlanetUpdateOne {
	puo.mutation.SetTerrain(s)
	return puo
}

// AddHomeToIDs adds the "home_to" edge to the Person entity by IDs.
func (puo *PlanetUpdateOne) AddHomeToIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.AddHomeToIDs(ids...)
	return puo
}

// AddHomeTo adds the "home_to" edges to the Person entity.
func (puo *PlanetUpdateOne) AddHomeTo(p ...*Person) *PlanetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddHomeToIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (puo *PlanetUpdateOne) AddAppearedInIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.AddAppearedInIDs(ids...)
	return puo
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (puo *PlanetUpdateOne) AddAppearedIn(f ...*Film) *PlanetUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddAppearedInIDs(ids...)
}

// AddOriginOfIDs adds the "origin_of" edge to the Species entity by IDs.
func (puo *PlanetUpdateOne) AddOriginOfIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.AddOriginOfIDs(ids...)
	return puo
}

// AddOriginOf adds the "origin_of" edges to the Species entity.
func (puo *PlanetUpdateOne) AddOriginOf(s ...*Species) *PlanetUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddOriginOfIDs(ids...)
}

// Mutation returns the PlanetMutation object of the builder.
func (puo *PlanetUpdateOne) Mutation() *PlanetMutation {
	return puo.mutation
}

// ClearHomeTo clears all "home_to" edges to the Person entity.
func (puo *PlanetUpdateOne) ClearHomeTo() *PlanetUpdateOne {
	puo.mutation.ClearHomeTo()
	return puo
}

// RemoveHomeToIDs removes the "home_to" edge to Person entities by IDs.
func (puo *PlanetUpdateOne) RemoveHomeToIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.RemoveHomeToIDs(ids...)
	return puo
}

// RemoveHomeTo removes "home_to" edges to Person entities.
func (puo *PlanetUpdateOne) RemoveHomeTo(p ...*Person) *PlanetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveHomeToIDs(ids...)
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (puo *PlanetUpdateOne) ClearAppearedIn() *PlanetUpdateOne {
	puo.mutation.ClearAppearedIn()
	return puo
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (puo *PlanetUpdateOne) RemoveAppearedInIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.RemoveAppearedInIDs(ids...)
	return puo
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (puo *PlanetUpdateOne) RemoveAppearedIn(f ...*Film) *PlanetUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveAppearedInIDs(ids...)
}

// ClearOriginOf clears all "origin_of" edges to the Species entity.
func (puo *PlanetUpdateOne) ClearOriginOf() *PlanetUpdateOne {
	puo.mutation.ClearOriginOf()
	return puo
}

// RemoveOriginOfIDs removes the "origin_of" edge to Species entities by IDs.
func (puo *PlanetUpdateOne) RemoveOriginOfIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.RemoveOriginOfIDs(ids...)
	return puo
}

// RemoveOriginOf removes "origin_of" edges to Species entities.
func (puo *PlanetUpdateOne) RemoveOriginOf(s ...*Species) *PlanetUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveOriginOfIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanetUpdateOne) Select(field string, fields ...string) *PlanetUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Planet entity.
func (puo *PlanetUpdateOne) Save(ctx context.Context) (*Planet, error) {
	var (
		err  error
		node *Planet
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanetUpdateOne) SaveX(ctx context.Context) *Planet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanetUpdateOne) sqlSave(ctx context.Context) (_node *Planet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planet.Table,
			Columns: planet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Planet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planet.FieldID)
		for _, f := range fields {
			if !planet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != planet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Climate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldClimate,
		})
	}
	if value, ok := puo.mutation.Diameter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldDiameter,
		})
	}
	if value, ok := puo.mutation.AddedDiameter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldDiameter,
		})
	}
	if puo.mutation.DiameterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: planet.FieldDiameter,
		})
	}
	if value, ok := puo.mutation.Gravity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldGravity,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldName,
		})
	}
	if value, ok := puo.mutation.OrbitalPeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldOrbitalPeriod,
		})
	}
	if value, ok := puo.mutation.Population(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := puo.mutation.AddedPopulation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if puo.mutation.PopulationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := puo.mutation.RotationPeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldRotationPeriod,
		})
	}
	if value, ok := puo.mutation.SurfaceWater(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldSurfaceWater,
		})
	}
	if value, ok := puo.mutation.Terrain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldTerrain,
		})
	}
	if puo.mutation.HomeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedHomeToIDs(); len(nodes) > 0 && !puo.mutation.HomeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.HomeToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !puo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OriginOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOriginOfIDs(); len(nodes) > 0 && !puo.mutation.OriginOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OriginOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Planet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
