// Code generated by entc, DO NOT EDIT.

package starship

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CargoCapacity applies equality check predicate on the "cargo_capacity" field. It's identical to CargoCapacityEQ.
func CargoCapacity(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCargoCapacity), v))
	})
}

// Class applies equality check predicate on the "class" field. It's identical to ClassEQ.
func Class(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClass), v))
	})
}

// Consumables applies equality check predicate on the "consumables" field. It's identical to ConsumablesEQ.
func Consumables(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsumables), v))
	})
}

// CostInCredits applies equality check predicate on the "cost_in_credits" field. It's identical to CostInCreditsEQ.
func CostInCredits(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCostInCredits), v))
	})
}

// Crew applies equality check predicate on the "crew" field. It's identical to CrewEQ.
func Crew(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrew), v))
	})
}

// HyperdriveRating applies equality check predicate on the "hyperdrive_rating" field. It's identical to HyperdriveRatingEQ.
func HyperdriveRating(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHyperdriveRating), v))
	})
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// Manufacturer applies equality check predicate on the "manufacturer" field. It's identical to ManufacturerEQ.
func Manufacturer(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturer), v))
	})
}

// MaxAtmospheringSpeed applies equality check predicate on the "max_atmosphering_speed" field. It's identical to MaxAtmospheringSpeedEQ.
func MaxAtmospheringSpeed(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaximumMegalights applies equality check predicate on the "maximum_megalights" field. It's identical to MaximumMegalightsEQ.
func MaximumMegalights(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaximumMegalights), v))
	})
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// PassengerCapacity applies equality check predicate on the "passenger_capacity" field. It's identical to PassengerCapacityEQ.
func PassengerCapacity(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassengerCapacity), v))
	})
}

// CargoCapacityEQ applies the EQ predicate on the "cargo_capacity" field.
func CargoCapacityEQ(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCargoCapacity), v))
	})
}

// CargoCapacityNEQ applies the NEQ predicate on the "cargo_capacity" field.
func CargoCapacityNEQ(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCargoCapacity), v))
	})
}

// CargoCapacityIn applies the In predicate on the "cargo_capacity" field.
func CargoCapacityIn(vs ...int) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCargoCapacity), v...))
	})
}

// CargoCapacityNotIn applies the NotIn predicate on the "cargo_capacity" field.
func CargoCapacityNotIn(vs ...int) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCargoCapacity), v...))
	})
}

// CargoCapacityGT applies the GT predicate on the "cargo_capacity" field.
func CargoCapacityGT(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCargoCapacity), v))
	})
}

// CargoCapacityGTE applies the GTE predicate on the "cargo_capacity" field.
func CargoCapacityGTE(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCargoCapacity), v))
	})
}

// CargoCapacityLT applies the LT predicate on the "cargo_capacity" field.
func CargoCapacityLT(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCargoCapacity), v))
	})
}

// CargoCapacityLTE applies the LTE predicate on the "cargo_capacity" field.
func CargoCapacityLTE(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCargoCapacity), v))
	})
}

// CargoCapacityIsNil applies the IsNil predicate on the "cargo_capacity" field.
func CargoCapacityIsNil() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCargoCapacity)))
	})
}

// CargoCapacityNotNil applies the NotNil predicate on the "cargo_capacity" field.
func CargoCapacityNotNil() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCargoCapacity)))
	})
}

// ClassEQ applies the EQ predicate on the "class" field.
func ClassEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClass), v))
	})
}

// ClassNEQ applies the NEQ predicate on the "class" field.
func ClassNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClass), v))
	})
}

// ClassIn applies the In predicate on the "class" field.
func ClassIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClass), v...))
	})
}

// ClassNotIn applies the NotIn predicate on the "class" field.
func ClassNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClass), v...))
	})
}

// ClassGT applies the GT predicate on the "class" field.
func ClassGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClass), v))
	})
}

// ClassGTE applies the GTE predicate on the "class" field.
func ClassGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClass), v))
	})
}

// ClassLT applies the LT predicate on the "class" field.
func ClassLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClass), v))
	})
}

// ClassLTE applies the LTE predicate on the "class" field.
func ClassLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClass), v))
	})
}

// ClassContains applies the Contains predicate on the "class" field.
func ClassContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClass), v))
	})
}

// ClassHasPrefix applies the HasPrefix predicate on the "class" field.
func ClassHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClass), v))
	})
}

// ClassHasSuffix applies the HasSuffix predicate on the "class" field.
func ClassHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClass), v))
	})
}

// ClassEqualFold applies the EqualFold predicate on the "class" field.
func ClassEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClass), v))
	})
}

// ClassContainsFold applies the ContainsFold predicate on the "class" field.
func ClassContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClass), v))
	})
}

// ConsumablesEQ applies the EQ predicate on the "consumables" field.
func ConsumablesEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsumables), v))
	})
}

// ConsumablesNEQ applies the NEQ predicate on the "consumables" field.
func ConsumablesNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConsumables), v))
	})
}

// ConsumablesIn applies the In predicate on the "consumables" field.
func ConsumablesIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConsumables), v...))
	})
}

// ConsumablesNotIn applies the NotIn predicate on the "consumables" field.
func ConsumablesNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConsumables), v...))
	})
}

// ConsumablesGT applies the GT predicate on the "consumables" field.
func ConsumablesGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConsumables), v))
	})
}

// ConsumablesGTE applies the GTE predicate on the "consumables" field.
func ConsumablesGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConsumables), v))
	})
}

// ConsumablesLT applies the LT predicate on the "consumables" field.
func ConsumablesLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConsumables), v))
	})
}

// ConsumablesLTE applies the LTE predicate on the "consumables" field.
func ConsumablesLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConsumables), v))
	})
}

// ConsumablesContains applies the Contains predicate on the "consumables" field.
func ConsumablesContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConsumables), v))
	})
}

// ConsumablesHasPrefix applies the HasPrefix predicate on the "consumables" field.
func ConsumablesHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConsumables), v))
	})
}

// ConsumablesHasSuffix applies the HasSuffix predicate on the "consumables" field.
func ConsumablesHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConsumables), v))
	})
}

// ConsumablesEqualFold applies the EqualFold predicate on the "consumables" field.
func ConsumablesEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConsumables), v))
	})
}

// ConsumablesContainsFold applies the ContainsFold predicate on the "consumables" field.
func ConsumablesContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConsumables), v))
	})
}

// CostInCreditsEQ applies the EQ predicate on the "cost_in_credits" field.
func CostInCreditsEQ(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCostInCredits), v))
	})
}

// CostInCreditsNEQ applies the NEQ predicate on the "cost_in_credits" field.
func CostInCreditsNEQ(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCostInCredits), v))
	})
}

// CostInCreditsIn applies the In predicate on the "cost_in_credits" field.
func CostInCreditsIn(vs ...int) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCostInCredits), v...))
	})
}

// CostInCreditsNotIn applies the NotIn predicate on the "cost_in_credits" field.
func CostInCreditsNotIn(vs ...int) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCostInCredits), v...))
	})
}

// CostInCreditsGT applies the GT predicate on the "cost_in_credits" field.
func CostInCreditsGT(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCostInCredits), v))
	})
}

// CostInCreditsGTE applies the GTE predicate on the "cost_in_credits" field.
func CostInCreditsGTE(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCostInCredits), v))
	})
}

// CostInCreditsLT applies the LT predicate on the "cost_in_credits" field.
func CostInCreditsLT(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCostInCredits), v))
	})
}

// CostInCreditsLTE applies the LTE predicate on the "cost_in_credits" field.
func CostInCreditsLTE(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCostInCredits), v))
	})
}

// CrewEQ applies the EQ predicate on the "crew" field.
func CrewEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrew), v))
	})
}

// CrewNEQ applies the NEQ predicate on the "crew" field.
func CrewNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrew), v))
	})
}

// CrewIn applies the In predicate on the "crew" field.
func CrewIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCrew), v...))
	})
}

// CrewNotIn applies the NotIn predicate on the "crew" field.
func CrewNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCrew), v...))
	})
}

// CrewGT applies the GT predicate on the "crew" field.
func CrewGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrew), v))
	})
}

// CrewGTE applies the GTE predicate on the "crew" field.
func CrewGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrew), v))
	})
}

// CrewLT applies the LT predicate on the "crew" field.
func CrewLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrew), v))
	})
}

// CrewLTE applies the LTE predicate on the "crew" field.
func CrewLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrew), v))
	})
}

// CrewContains applies the Contains predicate on the "crew" field.
func CrewContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrew), v))
	})
}

// CrewHasPrefix applies the HasPrefix predicate on the "crew" field.
func CrewHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrew), v))
	})
}

// CrewHasSuffix applies the HasSuffix predicate on the "crew" field.
func CrewHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrew), v))
	})
}

// CrewEqualFold applies the EqualFold predicate on the "crew" field.
func CrewEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrew), v))
	})
}

// CrewContainsFold applies the ContainsFold predicate on the "crew" field.
func CrewContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrew), v))
	})
}

// HyperdriveRatingEQ applies the EQ predicate on the "hyperdrive_rating" field.
func HyperdriveRatingEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingNEQ applies the NEQ predicate on the "hyperdrive_rating" field.
func HyperdriveRatingNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingIn applies the In predicate on the "hyperdrive_rating" field.
func HyperdriveRatingIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHyperdriveRating), v...))
	})
}

// HyperdriveRatingNotIn applies the NotIn predicate on the "hyperdrive_rating" field.
func HyperdriveRatingNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHyperdriveRating), v...))
	})
}

// HyperdriveRatingGT applies the GT predicate on the "hyperdrive_rating" field.
func HyperdriveRatingGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingGTE applies the GTE predicate on the "hyperdrive_rating" field.
func HyperdriveRatingGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingLT applies the LT predicate on the "hyperdrive_rating" field.
func HyperdriveRatingLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingLTE applies the LTE predicate on the "hyperdrive_rating" field.
func HyperdriveRatingLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingContains applies the Contains predicate on the "hyperdrive_rating" field.
func HyperdriveRatingContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingHasPrefix applies the HasPrefix predicate on the "hyperdrive_rating" field.
func HyperdriveRatingHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingHasSuffix applies the HasSuffix predicate on the "hyperdrive_rating" field.
func HyperdriveRatingHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingEqualFold applies the EqualFold predicate on the "hyperdrive_rating" field.
func HyperdriveRatingEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHyperdriveRating), v))
	})
}

// HyperdriveRatingContainsFold applies the ContainsFold predicate on the "hyperdrive_rating" field.
func HyperdriveRatingContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHyperdriveRating), v))
	})
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLength), v))
	})
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...float64) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLength), v...))
	})
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...float64) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLength), v...))
	})
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLength), v))
	})
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLength), v))
	})
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLength), v))
	})
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v float64) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLength), v))
	})
}

// ManufacturerEQ applies the EQ predicate on the "manufacturer" field.
func ManufacturerEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturer), v))
	})
}

// ManufacturerNEQ applies the NEQ predicate on the "manufacturer" field.
func ManufacturerNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManufacturer), v))
	})
}

// ManufacturerIn applies the In predicate on the "manufacturer" field.
func ManufacturerIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManufacturer), v...))
	})
}

// ManufacturerNotIn applies the NotIn predicate on the "manufacturer" field.
func ManufacturerNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManufacturer), v...))
	})
}

// ManufacturerGT applies the GT predicate on the "manufacturer" field.
func ManufacturerGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManufacturer), v))
	})
}

// ManufacturerGTE applies the GTE predicate on the "manufacturer" field.
func ManufacturerGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManufacturer), v))
	})
}

// ManufacturerLT applies the LT predicate on the "manufacturer" field.
func ManufacturerLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManufacturer), v))
	})
}

// ManufacturerLTE applies the LTE predicate on the "manufacturer" field.
func ManufacturerLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManufacturer), v))
	})
}

// ManufacturerContains applies the Contains predicate on the "manufacturer" field.
func ManufacturerContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldManufacturer), v))
	})
}

// ManufacturerHasPrefix applies the HasPrefix predicate on the "manufacturer" field.
func ManufacturerHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldManufacturer), v))
	})
}

// ManufacturerHasSuffix applies the HasSuffix predicate on the "manufacturer" field.
func ManufacturerHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldManufacturer), v))
	})
}

// ManufacturerEqualFold applies the EqualFold predicate on the "manufacturer" field.
func ManufacturerEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldManufacturer), v))
	})
}

// ManufacturerContainsFold applies the ContainsFold predicate on the "manufacturer" field.
func ManufacturerContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldManufacturer), v))
	})
}

// MaxAtmospheringSpeedEQ applies the EQ predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedNEQ applies the NEQ predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedIn applies the In predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxAtmospheringSpeed), v...))
	})
}

// MaxAtmospheringSpeedNotIn applies the NotIn predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxAtmospheringSpeed), v...))
	})
}

// MaxAtmospheringSpeedGT applies the GT predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedGTE applies the GTE predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedLT applies the LT predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedLTE applies the LTE predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedContains applies the Contains predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedHasPrefix applies the HasPrefix predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedHasSuffix applies the HasSuffix predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedEqualFold applies the EqualFold predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaxAtmospheringSpeedContainsFold applies the ContainsFold predicate on the "max_atmosphering_speed" field.
func MaxAtmospheringSpeedContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaxAtmospheringSpeed), v))
	})
}

// MaximumMegalightsEQ applies the EQ predicate on the "maximum_megalights" field.
func MaximumMegalightsEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsNEQ applies the NEQ predicate on the "maximum_megalights" field.
func MaximumMegalightsNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsIn applies the In predicate on the "maximum_megalights" field.
func MaximumMegalightsIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaximumMegalights), v...))
	})
}

// MaximumMegalightsNotIn applies the NotIn predicate on the "maximum_megalights" field.
func MaximumMegalightsNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaximumMegalights), v...))
	})
}

// MaximumMegalightsGT applies the GT predicate on the "maximum_megalights" field.
func MaximumMegalightsGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsGTE applies the GTE predicate on the "maximum_megalights" field.
func MaximumMegalightsGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsLT applies the LT predicate on the "maximum_megalights" field.
func MaximumMegalightsLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsLTE applies the LTE predicate on the "maximum_megalights" field.
func MaximumMegalightsLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsContains applies the Contains predicate on the "maximum_megalights" field.
func MaximumMegalightsContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsHasPrefix applies the HasPrefix predicate on the "maximum_megalights" field.
func MaximumMegalightsHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsHasSuffix applies the HasSuffix predicate on the "maximum_megalights" field.
func MaximumMegalightsHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsIsNil applies the IsNil predicate on the "maximum_megalights" field.
func MaximumMegalightsIsNil() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaximumMegalights)))
	})
}

// MaximumMegalightsNotNil applies the NotNil predicate on the "maximum_megalights" field.
func MaximumMegalightsNotNil() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaximumMegalights)))
	})
}

// MaximumMegalightsEqualFold applies the EqualFold predicate on the "maximum_megalights" field.
func MaximumMegalightsEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaximumMegalights), v))
	})
}

// MaximumMegalightsContainsFold applies the ContainsFold predicate on the "maximum_megalights" field.
func MaximumMegalightsContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaximumMegalights), v))
	})
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModel), v))
	})
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModel), v...))
	})
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModel), v...))
	})
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModel), v))
	})
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModel), v))
	})
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModel), v))
	})
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModel), v))
	})
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModel), v))
	})
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModel), v))
	})
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModel), v))
	})
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModel), v))
	})
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModel), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PassengerCapacityEQ applies the EQ predicate on the "passenger_capacity" field.
func PassengerCapacityEQ(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassengerCapacity), v))
	})
}

// PassengerCapacityNEQ applies the NEQ predicate on the "passenger_capacity" field.
func PassengerCapacityNEQ(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassengerCapacity), v))
	})
}

// PassengerCapacityIn applies the In predicate on the "passenger_capacity" field.
func PassengerCapacityIn(vs ...int) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassengerCapacity), v...))
	})
}

// PassengerCapacityNotIn applies the NotIn predicate on the "passenger_capacity" field.
func PassengerCapacityNotIn(vs ...int) predicate.Starship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Starship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassengerCapacity), v...))
	})
}

// PassengerCapacityGT applies the GT predicate on the "passenger_capacity" field.
func PassengerCapacityGT(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassengerCapacity), v))
	})
}

// PassengerCapacityGTE applies the GTE predicate on the "passenger_capacity" field.
func PassengerCapacityGTE(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassengerCapacity), v))
	})
}

// PassengerCapacityLT applies the LT predicate on the "passenger_capacity" field.
func PassengerCapacityLT(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassengerCapacity), v))
	})
}

// PassengerCapacityLTE applies the LTE predicate on the "passenger_capacity" field.
func PassengerCapacityLTE(v int) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassengerCapacity), v))
	})
}

// PassengerCapacityIsNil applies the IsNil predicate on the "passenger_capacity" field.
func PassengerCapacityIsNil() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassengerCapacity)))
	})
}

// PassengerCapacityNotNil applies the NotNil predicate on the "passenger_capacity" field.
func PassengerCapacityNotNil() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassengerCapacity)))
	})
}

// HasAppearedIn applies the HasEdge predicate on the "appeared_in" edge.
func HasAppearedIn() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppearedInTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppearedInTable, AppearedInPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppearedInWith applies the HasEdge predicate on the "appeared_in" edge with a given conditions (other predicates).
func HasAppearedInWith(preds ...predicate.Film) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppearedInInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppearedInTable, AppearedInPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPilotedBy applies the HasEdge predicate on the "piloted_by" edge.
func HasPilotedBy() predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PilotedByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PilotedByTable, PilotedByPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPilotedByWith applies the HasEdge predicate on the "piloted_by" edge with a given conditions (other predicates).
func HasPilotedByWith(preds ...predicate.Person) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PilotedByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PilotedByTable, PilotedByPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Starship) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Starship) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Starship) predicate.Starship {
	return predicate.Starship(func(s *sql.Selector) {
		p(s.Not())
	})
}
