// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/starship"
)

// StarshipUpdate is the builder for updating Starship entities.
type StarshipUpdate struct {
	config
	hooks    []Hook
	mutation *StarshipMutation
}

// Where appends a list predicates to the StarshipUpdate builder.
func (su *StarshipUpdate) Where(ps ...predicate.Starship) *StarshipUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCargoCapacity sets the "cargo_capacity" field.
func (su *StarshipUpdate) SetCargoCapacity(i int) *StarshipUpdate {
	su.mutation.ResetCargoCapacity()
	su.mutation.SetCargoCapacity(i)
	return su
}

// SetNillableCargoCapacity sets the "cargo_capacity" field if the given value is not nil.
func (su *StarshipUpdate) SetNillableCargoCapacity(i *int) *StarshipUpdate {
	if i != nil {
		su.SetCargoCapacity(*i)
	}
	return su
}

// AddCargoCapacity adds i to the "cargo_capacity" field.
func (su *StarshipUpdate) AddCargoCapacity(i int) *StarshipUpdate {
	su.mutation.AddCargoCapacity(i)
	return su
}

// ClearCargoCapacity clears the value of the "cargo_capacity" field.
func (su *StarshipUpdate) ClearCargoCapacity() *StarshipUpdate {
	su.mutation.ClearCargoCapacity()
	return su
}

// SetClass sets the "class" field.
func (su *StarshipUpdate) SetClass(s string) *StarshipUpdate {
	su.mutation.SetClass(s)
	return su
}

// SetConsumables sets the "consumables" field.
func (su *StarshipUpdate) SetConsumables(s string) *StarshipUpdate {
	su.mutation.SetConsumables(s)
	return su
}

// SetCostInCredits sets the "cost_in_credits" field.
func (su *StarshipUpdate) SetCostInCredits(i int) *StarshipUpdate {
	su.mutation.ResetCostInCredits()
	su.mutation.SetCostInCredits(i)
	return su
}

// AddCostInCredits adds i to the "cost_in_credits" field.
func (su *StarshipUpdate) AddCostInCredits(i int) *StarshipUpdate {
	su.mutation.AddCostInCredits(i)
	return su
}

// SetCrew sets the "crew" field.
func (su *StarshipUpdate) SetCrew(s string) *StarshipUpdate {
	su.mutation.SetCrew(s)
	return su
}

// SetHyperdriveRating sets the "hyperdrive_rating" field.
func (su *StarshipUpdate) SetHyperdriveRating(s string) *StarshipUpdate {
	su.mutation.SetHyperdriveRating(s)
	return su
}

// SetLength sets the "length" field.
func (su *StarshipUpdate) SetLength(f float64) *StarshipUpdate {
	su.mutation.ResetLength()
	su.mutation.SetLength(f)
	return su
}

// AddLength adds f to the "length" field.
func (su *StarshipUpdate) AddLength(f float64) *StarshipUpdate {
	su.mutation.AddLength(f)
	return su
}

// SetManufacturer sets the "manufacturer" field.
func (su *StarshipUpdate) SetManufacturer(s string) *StarshipUpdate {
	su.mutation.SetManufacturer(s)
	return su
}

// SetMaxAtmospheringSpeed sets the "max_atmosphering_speed" field.
func (su *StarshipUpdate) SetMaxAtmospheringSpeed(s string) *StarshipUpdate {
	su.mutation.SetMaxAtmospheringSpeed(s)
	return su
}

// SetMaximumMegalights sets the "maximum_megalights" field.
func (su *StarshipUpdate) SetMaximumMegalights(s string) *StarshipUpdate {
	su.mutation.SetMaximumMegalights(s)
	return su
}

// SetNillableMaximumMegalights sets the "maximum_megalights" field if the given value is not nil.
func (su *StarshipUpdate) SetNillableMaximumMegalights(s *string) *StarshipUpdate {
	if s != nil {
		su.SetMaximumMegalights(*s)
	}
	return su
}

// ClearMaximumMegalights clears the value of the "maximum_megalights" field.
func (su *StarshipUpdate) ClearMaximumMegalights() *StarshipUpdate {
	su.mutation.ClearMaximumMegalights()
	return su
}

// SetModel sets the "model" field.
func (su *StarshipUpdate) SetModel(s string) *StarshipUpdate {
	su.mutation.SetModel(s)
	return su
}

// SetName sets the "name" field.
func (su *StarshipUpdate) SetName(s string) *StarshipUpdate {
	su.mutation.SetName(s)
	return su
}

// SetPassengerCapacity sets the "passenger_capacity" field.
func (su *StarshipUpdate) SetPassengerCapacity(i int) *StarshipUpdate {
	su.mutation.ResetPassengerCapacity()
	su.mutation.SetPassengerCapacity(i)
	return su
}

// SetNillablePassengerCapacity sets the "passenger_capacity" field if the given value is not nil.
func (su *StarshipUpdate) SetNillablePassengerCapacity(i *int) *StarshipUpdate {
	if i != nil {
		su.SetPassengerCapacity(*i)
	}
	return su
}

// AddPassengerCapacity adds i to the "passenger_capacity" field.
func (su *StarshipUpdate) AddPassengerCapacity(i int) *StarshipUpdate {
	su.mutation.AddPassengerCapacity(i)
	return su
}

// ClearPassengerCapacity clears the value of the "passenger_capacity" field.
func (su *StarshipUpdate) ClearPassengerCapacity() *StarshipUpdate {
	su.mutation.ClearPassengerCapacity()
	return su
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (su *StarshipUpdate) AddAppearedInIDs(ids ...int) *StarshipUpdate {
	su.mutation.AddAppearedInIDs(ids...)
	return su
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (su *StarshipUpdate) AddAppearedIn(f ...*Film) *StarshipUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.AddAppearedInIDs(ids...)
}

// AddPilotedByIDs adds the "piloted_by" edge to the Person entity by IDs.
func (su *StarshipUpdate) AddPilotedByIDs(ids ...int) *StarshipUpdate {
	su.mutation.AddPilotedByIDs(ids...)
	return su
}

// AddPilotedBy adds the "piloted_by" edges to the Person entity.
func (su *StarshipUpdate) AddPilotedBy(p ...*Person) *StarshipUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPilotedByIDs(ids...)
}

// Mutation returns the StarshipMutation object of the builder.
func (su *StarshipUpdate) Mutation() *StarshipMutation {
	return su.mutation
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (su *StarshipUpdate) ClearAppearedIn() *StarshipUpdate {
	su.mutation.ClearAppearedIn()
	return su
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (su *StarshipUpdate) RemoveAppearedInIDs(ids ...int) *StarshipUpdate {
	su.mutation.RemoveAppearedInIDs(ids...)
	return su
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (su *StarshipUpdate) RemoveAppearedIn(f ...*Film) *StarshipUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.RemoveAppearedInIDs(ids...)
}

// ClearPilotedBy clears all "piloted_by" edges to the Person entity.
func (su *StarshipUpdate) ClearPilotedBy() *StarshipUpdate {
	su.mutation.ClearPilotedBy()
	return su
}

// RemovePilotedByIDs removes the "piloted_by" edge to Person entities by IDs.
func (su *StarshipUpdate) RemovePilotedByIDs(ids ...int) *StarshipUpdate {
	su.mutation.RemovePilotedByIDs(ids...)
	return su
}

// RemovePilotedBy removes "piloted_by" edges to Person entities.
func (su *StarshipUpdate) RemovePilotedBy(p ...*Person) *StarshipUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePilotedByIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StarshipUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StarshipUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StarshipUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StarshipUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StarshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   starship.Table,
			Columns: starship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: starship.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CargoCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCargoCapacity,
		})
	}
	if value, ok := su.mutation.AddedCargoCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCargoCapacity,
		})
	}
	if su.mutation.CargoCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: starship.FieldCargoCapacity,
		})
	}
	if value, ok := su.mutation.Class(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldClass,
		})
	}
	if value, ok := su.mutation.Consumables(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldConsumables,
		})
	}
	if value, ok := su.mutation.CostInCredits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCostInCredits,
		})
	}
	if value, ok := su.mutation.AddedCostInCredits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCostInCredits,
		})
	}
	if value, ok := su.mutation.Crew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldCrew,
		})
	}
	if value, ok := su.mutation.HyperdriveRating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldHyperdriveRating,
		})
	}
	if value, ok := su.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: starship.FieldLength,
		})
	}
	if value, ok := su.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: starship.FieldLength,
		})
	}
	if value, ok := su.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldManufacturer,
		})
	}
	if value, ok := su.mutation.MaxAtmospheringSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldMaxAtmospheringSpeed,
		})
	}
	if value, ok := su.mutation.MaximumMegalights(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldMaximumMegalights,
		})
	}
	if su.mutation.MaximumMegalightsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: starship.FieldMaximumMegalights,
		})
	}
	if value, ok := su.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldModel,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldName,
		})
	}
	if value, ok := su.mutation.PassengerCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldPassengerCapacity,
		})
	}
	if value, ok := su.mutation.AddedPassengerCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldPassengerCapacity,
		})
	}
	if su.mutation.PassengerCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: starship.FieldPassengerCapacity,
		})
	}
	if su.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.AppearedInTable,
			Columns: starship.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !su.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.AppearedInTable,
			Columns: starship.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.AppearedInTable,
			Columns: starship.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.PilotedByTable,
			Columns: starship.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPilotedByIDs(); len(nodes) > 0 && !su.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.PilotedByTable,
			Columns: starship.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PilotedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.PilotedByTable,
			Columns: starship.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{starship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StarshipUpdateOne is the builder for updating a single Starship entity.
type StarshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StarshipMutation
}

// SetCargoCapacity sets the "cargo_capacity" field.
func (suo *StarshipUpdateOne) SetCargoCapacity(i int) *StarshipUpdateOne {
	suo.mutation.ResetCargoCapacity()
	suo.mutation.SetCargoCapacity(i)
	return suo
}

// SetNillableCargoCapacity sets the "cargo_capacity" field if the given value is not nil.
func (suo *StarshipUpdateOne) SetNillableCargoCapacity(i *int) *StarshipUpdateOne {
	if i != nil {
		suo.SetCargoCapacity(*i)
	}
	return suo
}

// AddCargoCapacity adds i to the "cargo_capacity" field.
func (suo *StarshipUpdateOne) AddCargoCapacity(i int) *StarshipUpdateOne {
	suo.mutation.AddCargoCapacity(i)
	return suo
}

// ClearCargoCapacity clears the value of the "cargo_capacity" field.
func (suo *StarshipUpdateOne) ClearCargoCapacity() *StarshipUpdateOne {
	suo.mutation.ClearCargoCapacity()
	return suo
}

// SetClass sets the "class" field.
func (suo *StarshipUpdateOne) SetClass(s string) *StarshipUpdateOne {
	suo.mutation.SetClass(s)
	return suo
}

// SetConsumables sets the "consumables" field.
func (suo *StarshipUpdateOne) SetConsumables(s string) *StarshipUpdateOne {
	suo.mutation.SetConsumables(s)
	return suo
}

// SetCostInCredits sets the "cost_in_credits" field.
func (suo *StarshipUpdateOne) SetCostInCredits(i int) *StarshipUpdateOne {
	suo.mutation.ResetCostInCredits()
	suo.mutation.SetCostInCredits(i)
	return suo
}

// AddCostInCredits adds i to the "cost_in_credits" field.
func (suo *StarshipUpdateOne) AddCostInCredits(i int) *StarshipUpdateOne {
	suo.mutation.AddCostInCredits(i)
	return suo
}

// SetCrew sets the "crew" field.
func (suo *StarshipUpdateOne) SetCrew(s string) *StarshipUpdateOne {
	suo.mutation.SetCrew(s)
	return suo
}

// SetHyperdriveRating sets the "hyperdrive_rating" field.
func (suo *StarshipUpdateOne) SetHyperdriveRating(s string) *StarshipUpdateOne {
	suo.mutation.SetHyperdriveRating(s)
	return suo
}

// SetLength sets the "length" field.
func (suo *StarshipUpdateOne) SetLength(f float64) *StarshipUpdateOne {
	suo.mutation.ResetLength()
	suo.mutation.SetLength(f)
	return suo
}

// AddLength adds f to the "length" field.
func (suo *StarshipUpdateOne) AddLength(f float64) *StarshipUpdateOne {
	suo.mutation.AddLength(f)
	return suo
}

// SetManufacturer sets the "manufacturer" field.
func (suo *StarshipUpdateOne) SetManufacturer(s string) *StarshipUpdateOne {
	suo.mutation.SetManufacturer(s)
	return suo
}

// SetMaxAtmospheringSpeed sets the "max_atmosphering_speed" field.
func (suo *StarshipUpdateOne) SetMaxAtmospheringSpeed(s string) *StarshipUpdateOne {
	suo.mutation.SetMaxAtmospheringSpeed(s)
	return suo
}

// SetMaximumMegalights sets the "maximum_megalights" field.
func (suo *StarshipUpdateOne) SetMaximumMegalights(s string) *StarshipUpdateOne {
	suo.mutation.SetMaximumMegalights(s)
	return suo
}

// SetNillableMaximumMegalights sets the "maximum_megalights" field if the given value is not nil.
func (suo *StarshipUpdateOne) SetNillableMaximumMegalights(s *string) *StarshipUpdateOne {
	if s != nil {
		suo.SetMaximumMegalights(*s)
	}
	return suo
}

// ClearMaximumMegalights clears the value of the "maximum_megalights" field.
func (suo *StarshipUpdateOne) ClearMaximumMegalights() *StarshipUpdateOne {
	suo.mutation.ClearMaximumMegalights()
	return suo
}

// SetModel sets the "model" field.
func (suo *StarshipUpdateOne) SetModel(s string) *StarshipUpdateOne {
	suo.mutation.SetModel(s)
	return suo
}

// SetName sets the "name" field.
func (suo *StarshipUpdateOne) SetName(s string) *StarshipUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetPassengerCapacity sets the "passenger_capacity" field.
func (suo *StarshipUpdateOne) SetPassengerCapacity(i int) *StarshipUpdateOne {
	suo.mutation.ResetPassengerCapacity()
	suo.mutation.SetPassengerCapacity(i)
	return suo
}

// SetNillablePassengerCapacity sets the "passenger_capacity" field if the given value is not nil.
func (suo *StarshipUpdateOne) SetNillablePassengerCapacity(i *int) *StarshipUpdateOne {
	if i != nil {
		suo.SetPassengerCapacity(*i)
	}
	return suo
}

// AddPassengerCapacity adds i to the "passenger_capacity" field.
func (suo *StarshipUpdateOne) AddPassengerCapacity(i int) *StarshipUpdateOne {
	suo.mutation.AddPassengerCapacity(i)
	return suo
}

// ClearPassengerCapacity clears the value of the "passenger_capacity" field.
func (suo *StarshipUpdateOne) ClearPassengerCapacity() *StarshipUpdateOne {
	suo.mutation.ClearPassengerCapacity()
	return suo
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (suo *StarshipUpdateOne) AddAppearedInIDs(ids ...int) *StarshipUpdateOne {
	suo.mutation.AddAppearedInIDs(ids...)
	return suo
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (suo *StarshipUpdateOne) AddAppearedIn(f ...*Film) *StarshipUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.AddAppearedInIDs(ids...)
}

// AddPilotedByIDs adds the "piloted_by" edge to the Person entity by IDs.
func (suo *StarshipUpdateOne) AddPilotedByIDs(ids ...int) *StarshipUpdateOne {
	suo.mutation.AddPilotedByIDs(ids...)
	return suo
}

// AddPilotedBy adds the "piloted_by" edges to the Person entity.
func (suo *StarshipUpdateOne) AddPilotedBy(p ...*Person) *StarshipUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPilotedByIDs(ids...)
}

// Mutation returns the StarshipMutation object of the builder.
func (suo *StarshipUpdateOne) Mutation() *StarshipMutation {
	return suo.mutation
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (suo *StarshipUpdateOne) ClearAppearedIn() *StarshipUpdateOne {
	suo.mutation.ClearAppearedIn()
	return suo
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (suo *StarshipUpdateOne) RemoveAppearedInIDs(ids ...int) *StarshipUpdateOne {
	suo.mutation.RemoveAppearedInIDs(ids...)
	return suo
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (suo *StarshipUpdateOne) RemoveAppearedIn(f ...*Film) *StarshipUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.RemoveAppearedInIDs(ids...)
}

// ClearPilotedBy clears all "piloted_by" edges to the Person entity.
func (suo *StarshipUpdateOne) ClearPilotedBy() *StarshipUpdateOne {
	suo.mutation.ClearPilotedBy()
	return suo
}

// RemovePilotedByIDs removes the "piloted_by" edge to Person entities by IDs.
func (suo *StarshipUpdateOne) RemovePilotedByIDs(ids ...int) *StarshipUpdateOne {
	suo.mutation.RemovePilotedByIDs(ids...)
	return suo
}

// RemovePilotedBy removes "piloted_by" edges to Person entities.
func (suo *StarshipUpdateOne) RemovePilotedBy(p ...*Person) *StarshipUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePilotedByIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StarshipUpdateOne) Select(field string, fields ...string) *StarshipUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Starship entity.
func (suo *StarshipUpdateOne) Save(ctx context.Context) (*Starship, error) {
	var (
		err  error
		node *Starship
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StarshipUpdateOne) SaveX(ctx context.Context) *Starship {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StarshipUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StarshipUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StarshipUpdateOne) sqlSave(ctx context.Context) (_node *Starship, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   starship.Table,
			Columns: starship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: starship.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Starship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, starship.FieldID)
		for _, f := range fields {
			if !starship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != starship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CargoCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCargoCapacity,
		})
	}
	if value, ok := suo.mutation.AddedCargoCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCargoCapacity,
		})
	}
	if suo.mutation.CargoCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: starship.FieldCargoCapacity,
		})
	}
	if value, ok := suo.mutation.Class(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldClass,
		})
	}
	if value, ok := suo.mutation.Consumables(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldConsumables,
		})
	}
	if value, ok := suo.mutation.CostInCredits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCostInCredits,
		})
	}
	if value, ok := suo.mutation.AddedCostInCredits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldCostInCredits,
		})
	}
	if value, ok := suo.mutation.Crew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldCrew,
		})
	}
	if value, ok := suo.mutation.HyperdriveRating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldHyperdriveRating,
		})
	}
	if value, ok := suo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: starship.FieldLength,
		})
	}
	if value, ok := suo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: starship.FieldLength,
		})
	}
	if value, ok := suo.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldManufacturer,
		})
	}
	if value, ok := suo.mutation.MaxAtmospheringSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldMaxAtmospheringSpeed,
		})
	}
	if value, ok := suo.mutation.MaximumMegalights(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldMaximumMegalights,
		})
	}
	if suo.mutation.MaximumMegalightsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: starship.FieldMaximumMegalights,
		})
	}
	if value, ok := suo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldModel,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: starship.FieldName,
		})
	}
	if value, ok := suo.mutation.PassengerCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldPassengerCapacity,
		})
	}
	if value, ok := suo.mutation.AddedPassengerCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: starship.FieldPassengerCapacity,
		})
	}
	if suo.mutation.PassengerCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: starship.FieldPassengerCapacity,
		})
	}
	if suo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.AppearedInTable,
			Columns: starship.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !suo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.AppearedInTable,
			Columns: starship.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.AppearedInTable,
			Columns: starship.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.PilotedByTable,
			Columns: starship.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPilotedByIDs(); len(nodes) > 0 && !suo.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.PilotedByTable,
			Columns: starship.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PilotedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   starship.PilotedByTable,
			Columns: starship.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Starship{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{starship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
