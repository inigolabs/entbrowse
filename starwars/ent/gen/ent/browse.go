// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"strconv"

	"entgo.io/ent"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/starship"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
	"github.com/inigolabs/entbrowse/starwars/ent/schema"
)

func NewBrowseInterface(ent *Client) *browse {
	return &browse{
		ent: ent,
	}
}

type browse struct {
	ent *Client
}

func (browse) Types() []string {
	return []string{
		"Film",
		"Person",
		"Planet",
		"Species",
		"Starship",
		"Vehicle",
	}
}

func (browse) ConvertID(typeName string, id string) interface{} {
	switch typeName {

	case "Film":
		return convertID("int", id)
	case "Person":
		return convertID("int", id)
	case "Planet":
		return convertID("int", id)
	case "Species":
		return convertID("int", id)
	case "Starship":
		return convertID("int", id)
	case "Vehicle":
		return convertID("int", id)
	default:
		panic("invalid typename: " + typeName)
	}
}

func convertID(idType string, id string) interface{} {
	switch idType {
	case "int":
		id_, err := strconv.Atoi(id)
		if err != nil {
			panic(err)
		}
		return id_
	case "int64":
		id_, err := strconv.ParseInt(id, 10, 64)
		if err != nil {
			panic(err)
		}
		return id_
	case "string":
		return id
	default:
		panic("unsupported id type: " + idType)
	}
}

func (browse) Schema(typeName string) ent.Interface {
	switch typeName {

	case "Film":
		return schema.Film{}

	case "Person":
		return schema.Person{}

	case "Planet":
		return schema.Planet{}

	case "Species":
		return schema.Species{}

	case "Starship":
		return schema.Starship{}

	case "Vehicle":
		return schema.Vehicle{}

	}
	return nil
}

func (b *browse) Count(ctx context.Context, entityType string) int {
	switch entityType {

	case "Film":
		return b.ent.Film.Query().CountX(ctx)
	case "Person":
		return b.ent.Person.Query().CountX(ctx)
	case "Planet":
		return b.ent.Planet.Query().CountX(ctx)
	case "Species":
		return b.ent.Species.Query().CountX(ctx)
	case "Starship":
		return b.ent.Starship.Query().CountX(ctx)
	case "Vehicle":
		return b.ent.Vehicle.Query().CountX(ctx)
	}
	panic(fmt.Errorf("unknown entity type %s", entityType))
}

func (b *browse) List(ctx context.Context, entityType string) interface{} {
	switch entityType {

	case "Film":
		return b.ent.Film.Query().AllX(ctx)
	case "Person":
		return b.ent.Person.Query().AllX(ctx)
	case "Planet":
		return b.ent.Planet.Query().AllX(ctx)
	case "Species":
		return b.ent.Species.Query().AllX(ctx)
	case "Starship":
		return b.ent.Starship.Query().AllX(ctx)
	case "Vehicle":
		return b.ent.Vehicle.Query().AllX(ctx)
	}
	panic(fmt.Errorf("unknown entity type %s", entityType))
}

func (b *browse) Object(ctx context.Context, entityType string, entityID interface{}) interface{} {
	switch entityType {

	case "Film":
		switch id := entityID.(type) {
		case int:
			return b.ent.Film.Query().
				WithHasPerson().
				WithHasPlanet().
				WithHasStarship().
				WithHasVehicle().
				WithHasSpecies().
				Where(film.IDEQ(id)).OnlyX(ctx)
		default:
			panic(fmt.Errorf("invalid id type: %T, expecting int", id))
		}
	case "Person":
		switch id := entityID.(type) {
		case int:
			return b.ent.Person.Query().
				WithPilotedStarship().
				WithPilotedVehicle().
				WithIsOfType().
				WithAppearedIn().
				WithFromPlanet().
				Where(person.IDEQ(id)).OnlyX(ctx)
		default:
			panic(fmt.Errorf("invalid id type: %T, expecting int", id))
		}
	case "Planet":
		switch id := entityID.(type) {
		case int:
			return b.ent.Planet.Query().
				WithHomeTo().
				WithAppearedIn().
				WithOriginOf().
				Where(planet.IDEQ(id)).OnlyX(ctx)
		default:
			panic(fmt.Errorf("invalid id type: %T, expecting int", id))
		}
	case "Species":
		switch id := entityID.(type) {
		case int:
			return b.ent.Species.Query().
				WithOriginatesFrom().
				WithAppearedIn().
				WithIncludesPerson().
				Where(species.IDEQ(id)).OnlyX(ctx)
		default:
			panic(fmt.Errorf("invalid id type: %T, expecting int", id))
		}
	case "Starship":
		switch id := entityID.(type) {
		case int:
			return b.ent.Starship.Query().
				WithAppearedIn().
				WithPilotedBy().
				Where(starship.IDEQ(id)).OnlyX(ctx)
		default:
			panic(fmt.Errorf("invalid id type: %T, expecting int", id))
		}
	case "Vehicle":
		switch id := entityID.(type) {
		case int:
			return b.ent.Vehicle.Query().
				WithAppearedIn().
				WithPilotedBy().
				Where(vehicle.IDEQ(id)).OnlyX(ctx)
		default:
			panic(fmt.Errorf("invalid id type: %T, expecting int", id))
		}
	}
	panic(fmt.Errorf("unknown entity type %s", entityType))
}
