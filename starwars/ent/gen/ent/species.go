// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
)

// Species is the model entity for the Species schema.
type Species struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AverageHeight holds the value of the "average_height" field.
	AverageHeight int `json:"average_height,omitempty"`
	// AverageLifespan holds the value of the "average_lifespan" field.
	AverageLifespan string `json:"average_lifespan,omitempty"`
	// Classification holds the value of the "classification" field.
	Classification string `json:"classification,omitempty"`
	// Designation holds the value of the "designation" field.
	Designation string `json:"designation,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SkinColor holds the value of the "skin_color" field.
	SkinColor string `json:"skin_color,omitempty"`
	// EyeColor holds the value of the "eye_color" field.
	EyeColor string `json:"eye_color,omitempty"`
	// HairColor holds the value of the "hair_color" field.
	HairColor string `json:"hair_color,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpeciesQuery when eager-loading is set.
	Edges SpeciesEdges `json:"edges"`
}

// SpeciesEdges holds the relations/edges for other nodes in the graph.
type SpeciesEdges struct {
	// OriginatesFrom holds the value of the originates_from edge.
	OriginatesFrom []*Planet `json:"originates_from,omitempty"`
	// AppearedIn holds the value of the appeared_in edge.
	AppearedIn []*Film `json:"appeared_in,omitempty"`
	// IncludesPerson holds the value of the includes_person edge.
	IncludesPerson []*Person `json:"includes_person,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OriginatesFromOrErr returns the OriginatesFrom value or an error if the edge
// was not loaded in eager-loading.
func (e SpeciesEdges) OriginatesFromOrErr() ([]*Planet, error) {
	if e.loadedTypes[0] {
		return e.OriginatesFrom, nil
	}
	return nil, &NotLoadedError{edge: "originates_from"}
}

// AppearedInOrErr returns the AppearedIn value or an error if the edge
// was not loaded in eager-loading.
func (e SpeciesEdges) AppearedInOrErr() ([]*Film, error) {
	if e.loadedTypes[1] {
		return e.AppearedIn, nil
	}
	return nil, &NotLoadedError{edge: "appeared_in"}
}

// IncludesPersonOrErr returns the IncludesPerson value or an error if the edge
// was not loaded in eager-loading.
func (e SpeciesEdges) IncludesPersonOrErr() ([]*Person, error) {
	if e.loadedTypes[2] {
		return e.IncludesPerson, nil
	}
	return nil, &NotLoadedError{edge: "includes_person"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Species) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case species.FieldID, species.FieldAverageHeight:
			values[i] = new(sql.NullInt64)
		case species.FieldAverageLifespan, species.FieldClassification, species.FieldDesignation, species.FieldName, species.FieldSkinColor, species.FieldEyeColor, species.FieldHairColor, species.FieldLanguage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Species", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Species fields.
func (s *Species) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case species.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case species.FieldAverageHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field average_height", values[i])
			} else if value.Valid {
				s.AverageHeight = int(value.Int64)
			}
		case species.FieldAverageLifespan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field average_lifespan", values[i])
			} else if value.Valid {
				s.AverageLifespan = value.String
			}
		case species.FieldClassification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field classification", values[i])
			} else if value.Valid {
				s.Classification = value.String
			}
		case species.FieldDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field designation", values[i])
			} else if value.Valid {
				s.Designation = value.String
			}
		case species.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case species.FieldSkinColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skin_color", values[i])
			} else if value.Valid {
				s.SkinColor = value.String
			}
		case species.FieldEyeColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eye_color", values[i])
			} else if value.Valid {
				s.EyeColor = value.String
			}
		case species.FieldHairColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hair_color", values[i])
			} else if value.Valid {
				s.HairColor = value.String
			}
		case species.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				s.Language = value.String
			}
		}
	}
	return nil
}

// QueryOriginatesFrom queries the "originates_from" edge of the Species entity.
func (s *Species) QueryOriginatesFrom() *PlanetQuery {
	return (&SpeciesClient{config: s.config}).QueryOriginatesFrom(s)
}

// QueryAppearedIn queries the "appeared_in" edge of the Species entity.
func (s *Species) QueryAppearedIn() *FilmQuery {
	return (&SpeciesClient{config: s.config}).QueryAppearedIn(s)
}

// QueryIncludesPerson queries the "includes_person" edge of the Species entity.
func (s *Species) QueryIncludesPerson() *PersonQuery {
	return (&SpeciesClient{config: s.config}).QueryIncludesPerson(s)
}

// Update returns a builder for updating this Species.
// Note that you need to call Species.Unwrap() before calling this method if this Species
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Species) Update() *SpeciesUpdateOne {
	return (&SpeciesClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Species entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Species) Unwrap() *Species {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Species is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Species) String() string {
	var builder strings.Builder
	builder.WriteString("Species(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", average_height=")
	builder.WriteString(fmt.Sprintf("%v", s.AverageHeight))
	builder.WriteString(", average_lifespan=")
	builder.WriteString(s.AverageLifespan)
	builder.WriteString(", classification=")
	builder.WriteString(s.Classification)
	builder.WriteString(", designation=")
	builder.WriteString(s.Designation)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", skin_color=")
	builder.WriteString(s.SkinColor)
	builder.WriteString(", eye_color=")
	builder.WriteString(s.EyeColor)
	builder.WriteString(", hair_color=")
	builder.WriteString(s.HairColor)
	builder.WriteString(", language=")
	builder.WriteString(s.Language)
	builder.WriteByte(')')
	return builder.String()
}

// SpeciesSlice is a parsable slice of Species.
type SpeciesSlice []*Species

func (s SpeciesSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
