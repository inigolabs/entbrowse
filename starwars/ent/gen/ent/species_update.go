// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
)

// SpeciesUpdate is the builder for updating Species entities.
type SpeciesUpdate struct {
	config
	hooks    []Hook
	mutation *SpeciesMutation
}

// Where appends a list predicates to the SpeciesUpdate builder.
func (su *SpeciesUpdate) Where(ps ...predicate.Species) *SpeciesUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAverageHeight sets the "average_height" field.
func (su *SpeciesUpdate) SetAverageHeight(i int) *SpeciesUpdate {
	su.mutation.ResetAverageHeight()
	su.mutation.SetAverageHeight(i)
	return su
}

// AddAverageHeight adds i to the "average_height" field.
func (su *SpeciesUpdate) AddAverageHeight(i int) *SpeciesUpdate {
	su.mutation.AddAverageHeight(i)
	return su
}

// SetAverageLifespan sets the "average_lifespan" field.
func (su *SpeciesUpdate) SetAverageLifespan(s string) *SpeciesUpdate {
	su.mutation.SetAverageLifespan(s)
	return su
}

// SetClassification sets the "classification" field.
func (su *SpeciesUpdate) SetClassification(s string) *SpeciesUpdate {
	su.mutation.SetClassification(s)
	return su
}

// SetDesignation sets the "designation" field.
func (su *SpeciesUpdate) SetDesignation(s string) *SpeciesUpdate {
	su.mutation.SetDesignation(s)
	return su
}

// SetName sets the "name" field.
func (su *SpeciesUpdate) SetName(s string) *SpeciesUpdate {
	su.mutation.SetName(s)
	return su
}

// SetSkinColor sets the "skin_color" field.
func (su *SpeciesUpdate) SetSkinColor(s string) *SpeciesUpdate {
	su.mutation.SetSkinColor(s)
	return su
}

// SetEyeColor sets the "eye_color" field.
func (su *SpeciesUpdate) SetEyeColor(s string) *SpeciesUpdate {
	su.mutation.SetEyeColor(s)
	return su
}

// SetHairColor sets the "hair_color" field.
func (su *SpeciesUpdate) SetHairColor(s string) *SpeciesUpdate {
	su.mutation.SetHairColor(s)
	return su
}

// SetLanguage sets the "language" field.
func (su *SpeciesUpdate) SetLanguage(s string) *SpeciesUpdate {
	su.mutation.SetLanguage(s)
	return su
}

// AddOriginatesFromIDs adds the "originates_from" edge to the Planet entity by IDs.
func (su *SpeciesUpdate) AddOriginatesFromIDs(ids ...int) *SpeciesUpdate {
	su.mutation.AddOriginatesFromIDs(ids...)
	return su
}

// AddOriginatesFrom adds the "originates_from" edges to the Planet entity.
func (su *SpeciesUpdate) AddOriginatesFrom(p ...*Planet) *SpeciesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddOriginatesFromIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (su *SpeciesUpdate) AddAppearedInIDs(ids ...int) *SpeciesUpdate {
	su.mutation.AddAppearedInIDs(ids...)
	return su
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (su *SpeciesUpdate) AddAppearedIn(f ...*Film) *SpeciesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.AddAppearedInIDs(ids...)
}

// AddIncludesPersonIDs adds the "includes_person" edge to the Person entity by IDs.
func (su *SpeciesUpdate) AddIncludesPersonIDs(ids ...int) *SpeciesUpdate {
	su.mutation.AddIncludesPersonIDs(ids...)
	return su
}

// AddIncludesPerson adds the "includes_person" edges to the Person entity.
func (su *SpeciesUpdate) AddIncludesPerson(p ...*Person) *SpeciesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddIncludesPersonIDs(ids...)
}

// Mutation returns the SpeciesMutation object of the builder.
func (su *SpeciesUpdate) Mutation() *SpeciesMutation {
	return su.mutation
}

// ClearOriginatesFrom clears all "originates_from" edges to the Planet entity.
func (su *SpeciesUpdate) ClearOriginatesFrom() *SpeciesUpdate {
	su.mutation.ClearOriginatesFrom()
	return su
}

// RemoveOriginatesFromIDs removes the "originates_from" edge to Planet entities by IDs.
func (su *SpeciesUpdate) RemoveOriginatesFromIDs(ids ...int) *SpeciesUpdate {
	su.mutation.RemoveOriginatesFromIDs(ids...)
	return su
}

// RemoveOriginatesFrom removes "originates_from" edges to Planet entities.
func (su *SpeciesUpdate) RemoveOriginatesFrom(p ...*Planet) *SpeciesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveOriginatesFromIDs(ids...)
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (su *SpeciesUpdate) ClearAppearedIn() *SpeciesUpdate {
	su.mutation.ClearAppearedIn()
	return su
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (su *SpeciesUpdate) RemoveAppearedInIDs(ids ...int) *SpeciesUpdate {
	su.mutation.RemoveAppearedInIDs(ids...)
	return su
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (su *SpeciesUpdate) RemoveAppearedIn(f ...*Film) *SpeciesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.RemoveAppearedInIDs(ids...)
}

// ClearIncludesPerson clears all "includes_person" edges to the Person entity.
func (su *SpeciesUpdate) ClearIncludesPerson() *SpeciesUpdate {
	su.mutation.ClearIncludesPerson()
	return su
}

// RemoveIncludesPersonIDs removes the "includes_person" edge to Person entities by IDs.
func (su *SpeciesUpdate) RemoveIncludesPersonIDs(ids ...int) *SpeciesUpdate {
	su.mutation.RemoveIncludesPersonIDs(ids...)
	return su
}

// RemoveIncludesPerson removes "includes_person" edges to Person entities.
func (su *SpeciesUpdate) RemoveIncludesPerson(p ...*Person) *SpeciesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveIncludesPersonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpeciesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpeciesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpeciesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpeciesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpeciesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SpeciesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   species.Table,
			Columns: species.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: species.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.AverageHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: species.FieldAverageHeight,
		})
	}
	if value, ok := su.mutation.AddedAverageHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: species.FieldAverageHeight,
		})
	}
	if value, ok := su.mutation.AverageLifespan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldAverageLifespan,
		})
	}
	if value, ok := su.mutation.Classification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldClassification,
		})
	}
	if value, ok := su.mutation.Designation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldDesignation,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldName,
		})
	}
	if value, ok := su.mutation.SkinColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldSkinColor,
		})
	}
	if value, ok := su.mutation.EyeColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldEyeColor,
		})
	}
	if value, ok := su.mutation.HairColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldHairColor,
		})
	}
	if value, ok := su.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldLanguage,
		})
	}
	if su.mutation.OriginatesFromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   species.OriginatesFromTable,
			Columns: species.OriginatesFromPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedOriginatesFromIDs(); len(nodes) > 0 && !su.mutation.OriginatesFromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   species.OriginatesFromTable,
			Columns: species.OriginatesFromPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OriginatesFromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   species.OriginatesFromTable,
			Columns: species.OriginatesFromPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.AppearedInTable,
			Columns: species.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !su.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.AppearedInTable,
			Columns: species.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.AppearedInTable,
			Columns: species.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.IncludesPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.IncludesPersonTable,
			Columns: species.IncludesPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedIncludesPersonIDs(); len(nodes) > 0 && !su.mutation.IncludesPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.IncludesPersonTable,
			Columns: species.IncludesPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.IncludesPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.IncludesPersonTable,
			Columns: species.IncludesPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{species.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpeciesUpdateOne is the builder for updating a single Species entity.
type SpeciesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpeciesMutation
}

// SetAverageHeight sets the "average_height" field.
func (suo *SpeciesUpdateOne) SetAverageHeight(i int) *SpeciesUpdateOne {
	suo.mutation.ResetAverageHeight()
	suo.mutation.SetAverageHeight(i)
	return suo
}

// AddAverageHeight adds i to the "average_height" field.
func (suo *SpeciesUpdateOne) AddAverageHeight(i int) *SpeciesUpdateOne {
	suo.mutation.AddAverageHeight(i)
	return suo
}

// SetAverageLifespan sets the "average_lifespan" field.
func (suo *SpeciesUpdateOne) SetAverageLifespan(s string) *SpeciesUpdateOne {
	suo.mutation.SetAverageLifespan(s)
	return suo
}

// SetClassification sets the "classification" field.
func (suo *SpeciesUpdateOne) SetClassification(s string) *SpeciesUpdateOne {
	suo.mutation.SetClassification(s)
	return suo
}

// SetDesignation sets the "designation" field.
func (suo *SpeciesUpdateOne) SetDesignation(s string) *SpeciesUpdateOne {
	suo.mutation.SetDesignation(s)
	return suo
}

// SetName sets the "name" field.
func (suo *SpeciesUpdateOne) SetName(s string) *SpeciesUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetSkinColor sets the "skin_color" field.
func (suo *SpeciesUpdateOne) SetSkinColor(s string) *SpeciesUpdateOne {
	suo.mutation.SetSkinColor(s)
	return suo
}

// SetEyeColor sets the "eye_color" field.
func (suo *SpeciesUpdateOne) SetEyeColor(s string) *SpeciesUpdateOne {
	suo.mutation.SetEyeColor(s)
	return suo
}

// SetHairColor sets the "hair_color" field.
func (suo *SpeciesUpdateOne) SetHairColor(s string) *SpeciesUpdateOne {
	suo.mutation.SetHairColor(s)
	return suo
}

// SetLanguage sets the "language" field.
func (suo *SpeciesUpdateOne) SetLanguage(s string) *SpeciesUpdateOne {
	suo.mutation.SetLanguage(s)
	return suo
}

// AddOriginatesFromIDs adds the "originates_from" edge to the Planet entity by IDs.
func (suo *SpeciesUpdateOne) AddOriginatesFromIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.AddOriginatesFromIDs(ids...)
	return suo
}

// AddOriginatesFrom adds the "originates_from" edges to the Planet entity.
func (suo *SpeciesUpdateOne) AddOriginatesFrom(p ...*Planet) *SpeciesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddOriginatesFromIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (suo *SpeciesUpdateOne) AddAppearedInIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.AddAppearedInIDs(ids...)
	return suo
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (suo *SpeciesUpdateOne) AddAppearedIn(f ...*Film) *SpeciesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.AddAppearedInIDs(ids...)
}

// AddIncludesPersonIDs adds the "includes_person" edge to the Person entity by IDs.
func (suo *SpeciesUpdateOne) AddIncludesPersonIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.AddIncludesPersonIDs(ids...)
	return suo
}

// AddIncludesPerson adds the "includes_person" edges to the Person entity.
func (suo *SpeciesUpdateOne) AddIncludesPerson(p ...*Person) *SpeciesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddIncludesPersonIDs(ids...)
}

// Mutation returns the SpeciesMutation object of the builder.
func (suo *SpeciesUpdateOne) Mutation() *SpeciesMutation {
	return suo.mutation
}

// ClearOriginatesFrom clears all "originates_from" edges to the Planet entity.
func (suo *SpeciesUpdateOne) ClearOriginatesFrom() *SpeciesUpdateOne {
	suo.mutation.ClearOriginatesFrom()
	return suo
}

// RemoveOriginatesFromIDs removes the "originates_from" edge to Planet entities by IDs.
func (suo *SpeciesUpdateOne) RemoveOriginatesFromIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.RemoveOriginatesFromIDs(ids...)
	return suo
}

// RemoveOriginatesFrom removes "originates_from" edges to Planet entities.
func (suo *SpeciesUpdateOne) RemoveOriginatesFrom(p ...*Planet) *SpeciesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveOriginatesFromIDs(ids...)
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (suo *SpeciesUpdateOne) ClearAppearedIn() *SpeciesUpdateOne {
	suo.mutation.ClearAppearedIn()
	return suo
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (suo *SpeciesUpdateOne) RemoveAppearedInIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.RemoveAppearedInIDs(ids...)
	return suo
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (suo *SpeciesUpdateOne) RemoveAppearedIn(f ...*Film) *SpeciesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.RemoveAppearedInIDs(ids...)
}

// ClearIncludesPerson clears all "includes_person" edges to the Person entity.
func (suo *SpeciesUpdateOne) ClearIncludesPerson() *SpeciesUpdateOne {
	suo.mutation.ClearIncludesPerson()
	return suo
}

// RemoveIncludesPersonIDs removes the "includes_person" edge to Person entities by IDs.
func (suo *SpeciesUpdateOne) RemoveIncludesPersonIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.RemoveIncludesPersonIDs(ids...)
	return suo
}

// RemoveIncludesPerson removes "includes_person" edges to Person entities.
func (suo *SpeciesUpdateOne) RemoveIncludesPerson(p ...*Person) *SpeciesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveIncludesPersonIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpeciesUpdateOne) Select(field string, fields ...string) *SpeciesUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Species entity.
func (suo *SpeciesUpdateOne) Save(ctx context.Context) (*Species, error) {
	var (
		err  error
		node *Species
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpeciesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpeciesUpdateOne) SaveX(ctx context.Context) *Species {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpeciesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpeciesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SpeciesUpdateOne) sqlSave(ctx context.Context) (_node *Species, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   species.Table,
			Columns: species.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: species.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Species.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, species.FieldID)
		for _, f := range fields {
			if !species.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != species.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.AverageHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: species.FieldAverageHeight,
		})
	}
	if value, ok := suo.mutation.AddedAverageHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: species.FieldAverageHeight,
		})
	}
	if value, ok := suo.mutation.AverageLifespan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldAverageLifespan,
		})
	}
	if value, ok := suo.mutation.Classification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldClassification,
		})
	}
	if value, ok := suo.mutation.Designation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldDesignation,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldName,
		})
	}
	if value, ok := suo.mutation.SkinColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldSkinColor,
		})
	}
	if value, ok := suo.mutation.EyeColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldEyeColor,
		})
	}
	if value, ok := suo.mutation.HairColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldHairColor,
		})
	}
	if value, ok := suo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: species.FieldLanguage,
		})
	}
	if suo.mutation.OriginatesFromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   species.OriginatesFromTable,
			Columns: species.OriginatesFromPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedOriginatesFromIDs(); len(nodes) > 0 && !suo.mutation.OriginatesFromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   species.OriginatesFromTable,
			Columns: species.OriginatesFromPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OriginatesFromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   species.OriginatesFromTable,
			Columns: species.OriginatesFromPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.AppearedInTable,
			Columns: species.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !suo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.AppearedInTable,
			Columns: species.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.AppearedInTable,
			Columns: species.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.IncludesPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.IncludesPersonTable,
			Columns: species.IncludesPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedIncludesPersonIDs(); len(nodes) > 0 && !suo.mutation.IncludesPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.IncludesPersonTable,
			Columns: species.IncludesPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.IncludesPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   species.IncludesPersonTable,
			Columns: species.IncludesPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Species{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{species.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
