// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vu *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCargoCapacity sets the "cargo_capacity" field.
func (vu *VehicleUpdate) SetCargoCapacity(i int) *VehicleUpdate {
	vu.mutation.ResetCargoCapacity()
	vu.mutation.SetCargoCapacity(i)
	return vu
}

// SetNillableCargoCapacity sets the "cargo_capacity" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCargoCapacity(i *int) *VehicleUpdate {
	if i != nil {
		vu.SetCargoCapacity(*i)
	}
	return vu
}

// AddCargoCapacity adds i to the "cargo_capacity" field.
func (vu *VehicleUpdate) AddCargoCapacity(i int) *VehicleUpdate {
	vu.mutation.AddCargoCapacity(i)
	return vu
}

// ClearCargoCapacity clears the value of the "cargo_capacity" field.
func (vu *VehicleUpdate) ClearCargoCapacity() *VehicleUpdate {
	vu.mutation.ClearCargoCapacity()
	return vu
}

// SetConsumables sets the "consumables" field.
func (vu *VehicleUpdate) SetConsumables(s string) *VehicleUpdate {
	vu.mutation.SetConsumables(s)
	return vu
}

// SetCostInCredits sets the "cost_in_credits" field.
func (vu *VehicleUpdate) SetCostInCredits(i int) *VehicleUpdate {
	vu.mutation.ResetCostInCredits()
	vu.mutation.SetCostInCredits(i)
	return vu
}

// AddCostInCredits adds i to the "cost_in_credits" field.
func (vu *VehicleUpdate) AddCostInCredits(i int) *VehicleUpdate {
	vu.mutation.AddCostInCredits(i)
	return vu
}

// SetCrew sets the "crew" field.
func (vu *VehicleUpdate) SetCrew(s string) *VehicleUpdate {
	vu.mutation.SetCrew(s)
	return vu
}

// SetLength sets the "length" field.
func (vu *VehicleUpdate) SetLength(f float64) *VehicleUpdate {
	vu.mutation.ResetLength()
	vu.mutation.SetLength(f)
	return vu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableLength(f *float64) *VehicleUpdate {
	if f != nil {
		vu.SetLength(*f)
	}
	return vu
}

// AddLength adds f to the "length" field.
func (vu *VehicleUpdate) AddLength(f float64) *VehicleUpdate {
	vu.mutation.AddLength(f)
	return vu
}

// ClearLength clears the value of the "length" field.
func (vu *VehicleUpdate) ClearLength() *VehicleUpdate {
	vu.mutation.ClearLength()
	return vu
}

// SetManufacturer sets the "manufacturer" field.
func (vu *VehicleUpdate) SetManufacturer(s string) *VehicleUpdate {
	vu.mutation.SetManufacturer(s)
	return vu
}

// SetMaxAtmospheringSpeed sets the "max_atmosphering_speed" field.
func (vu *VehicleUpdate) SetMaxAtmospheringSpeed(s string) *VehicleUpdate {
	vu.mutation.SetMaxAtmospheringSpeed(s)
	return vu
}

// SetModel sets the "model" field.
func (vu *VehicleUpdate) SetModel(s string) *VehicleUpdate {
	vu.mutation.SetModel(s)
	return vu
}

// SetName sets the "name" field.
func (vu *VehicleUpdate) SetName(s string) *VehicleUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetPassengerCapacity sets the "passenger_capacity" field.
func (vu *VehicleUpdate) SetPassengerCapacity(i int) *VehicleUpdate {
	vu.mutation.ResetPassengerCapacity()
	vu.mutation.SetPassengerCapacity(i)
	return vu
}

// SetNillablePassengerCapacity sets the "passenger_capacity" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillablePassengerCapacity(i *int) *VehicleUpdate {
	if i != nil {
		vu.SetPassengerCapacity(*i)
	}
	return vu
}

// AddPassengerCapacity adds i to the "passenger_capacity" field.
func (vu *VehicleUpdate) AddPassengerCapacity(i int) *VehicleUpdate {
	vu.mutation.AddPassengerCapacity(i)
	return vu
}

// ClearPassengerCapacity clears the value of the "passenger_capacity" field.
func (vu *VehicleUpdate) ClearPassengerCapacity() *VehicleUpdate {
	vu.mutation.ClearPassengerCapacity()
	return vu
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (vu *VehicleUpdate) AddAppearedInIDs(ids ...int) *VehicleUpdate {
	vu.mutation.AddAppearedInIDs(ids...)
	return vu
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (vu *VehicleUpdate) AddAppearedIn(f ...*Film) *VehicleUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vu.AddAppearedInIDs(ids...)
}

// AddPilotedByIDs adds the "piloted_by" edge to the Person entity by IDs.
func (vu *VehicleUpdate) AddPilotedByIDs(ids ...int) *VehicleUpdate {
	vu.mutation.AddPilotedByIDs(ids...)
	return vu
}

// AddPilotedBy adds the "piloted_by" edges to the Person entity.
func (vu *VehicleUpdate) AddPilotedBy(p ...*Person) *VehicleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.AddPilotedByIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vu *VehicleUpdate) Mutation() *VehicleMutation {
	return vu.mutation
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (vu *VehicleUpdate) ClearAppearedIn() *VehicleUpdate {
	vu.mutation.ClearAppearedIn()
	return vu
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (vu *VehicleUpdate) RemoveAppearedInIDs(ids ...int) *VehicleUpdate {
	vu.mutation.RemoveAppearedInIDs(ids...)
	return vu
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (vu *VehicleUpdate) RemoveAppearedIn(f ...*Film) *VehicleUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vu.RemoveAppearedInIDs(ids...)
}

// ClearPilotedBy clears all "piloted_by" edges to the Person entity.
func (vu *VehicleUpdate) ClearPilotedBy() *VehicleUpdate {
	vu.mutation.ClearPilotedBy()
	return vu
}

// RemovePilotedByIDs removes the "piloted_by" edge to Person entities by IDs.
func (vu *VehicleUpdate) RemovePilotedByIDs(ids ...int) *VehicleUpdate {
	vu.mutation.RemovePilotedByIDs(ids...)
	return vu
}

// RemovePilotedBy removes "piloted_by" edges to Person entities.
func (vu *VehicleUpdate) RemovePilotedBy(p ...*Person) *VehicleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.RemovePilotedByIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VehicleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VehicleUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VehicleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CargoCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCargoCapacity,
		})
	}
	if value, ok := vu.mutation.AddedCargoCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCargoCapacity,
		})
	}
	if vu.mutation.CargoCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldCargoCapacity,
		})
	}
	if value, ok := vu.mutation.Consumables(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldConsumables,
		})
	}
	if value, ok := vu.mutation.CostInCredits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCostInCredits,
		})
	}
	if value, ok := vu.mutation.AddedCostInCredits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCostInCredits,
		})
	}
	if value, ok := vu.mutation.Crew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldCrew,
		})
	}
	if value, ok := vu.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vehicle.FieldLength,
		})
	}
	if value, ok := vu.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vehicle.FieldLength,
		})
	}
	if vu.mutation.LengthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: vehicle.FieldLength,
		})
	}
	if value, ok := vu.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldManufacturer,
		})
	}
	if value, ok := vu.mutation.MaxAtmospheringSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldMaxAtmospheringSpeed,
		})
	}
	if value, ok := vu.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldModel,
		})
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldName,
		})
	}
	if value, ok := vu.mutation.PassengerCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldPassengerCapacity,
		})
	}
	if value, ok := vu.mutation.AddedPassengerCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldPassengerCapacity,
		})
	}
	if vu.mutation.PassengerCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldPassengerCapacity,
		})
	}
	if vu.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !vu.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedPilotedByIDs(); len(nodes) > 0 && !vu.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PilotedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMutation
}

// SetCargoCapacity sets the "cargo_capacity" field.
func (vuo *VehicleUpdateOne) SetCargoCapacity(i int) *VehicleUpdateOne {
	vuo.mutation.ResetCargoCapacity()
	vuo.mutation.SetCargoCapacity(i)
	return vuo
}

// SetNillableCargoCapacity sets the "cargo_capacity" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCargoCapacity(i *int) *VehicleUpdateOne {
	if i != nil {
		vuo.SetCargoCapacity(*i)
	}
	return vuo
}

// AddCargoCapacity adds i to the "cargo_capacity" field.
func (vuo *VehicleUpdateOne) AddCargoCapacity(i int) *VehicleUpdateOne {
	vuo.mutation.AddCargoCapacity(i)
	return vuo
}

// ClearCargoCapacity clears the value of the "cargo_capacity" field.
func (vuo *VehicleUpdateOne) ClearCargoCapacity() *VehicleUpdateOne {
	vuo.mutation.ClearCargoCapacity()
	return vuo
}

// SetConsumables sets the "consumables" field.
func (vuo *VehicleUpdateOne) SetConsumables(s string) *VehicleUpdateOne {
	vuo.mutation.SetConsumables(s)
	return vuo
}

// SetCostInCredits sets the "cost_in_credits" field.
func (vuo *VehicleUpdateOne) SetCostInCredits(i int) *VehicleUpdateOne {
	vuo.mutation.ResetCostInCredits()
	vuo.mutation.SetCostInCredits(i)
	return vuo
}

// AddCostInCredits adds i to the "cost_in_credits" field.
func (vuo *VehicleUpdateOne) AddCostInCredits(i int) *VehicleUpdateOne {
	vuo.mutation.AddCostInCredits(i)
	return vuo
}

// SetCrew sets the "crew" field.
func (vuo *VehicleUpdateOne) SetCrew(s string) *VehicleUpdateOne {
	vuo.mutation.SetCrew(s)
	return vuo
}

// SetLength sets the "length" field.
func (vuo *VehicleUpdateOne) SetLength(f float64) *VehicleUpdateOne {
	vuo.mutation.ResetLength()
	vuo.mutation.SetLength(f)
	return vuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableLength(f *float64) *VehicleUpdateOne {
	if f != nil {
		vuo.SetLength(*f)
	}
	return vuo
}

// AddLength adds f to the "length" field.
func (vuo *VehicleUpdateOne) AddLength(f float64) *VehicleUpdateOne {
	vuo.mutation.AddLength(f)
	return vuo
}

// ClearLength clears the value of the "length" field.
func (vuo *VehicleUpdateOne) ClearLength() *VehicleUpdateOne {
	vuo.mutation.ClearLength()
	return vuo
}

// SetManufacturer sets the "manufacturer" field.
func (vuo *VehicleUpdateOne) SetManufacturer(s string) *VehicleUpdateOne {
	vuo.mutation.SetManufacturer(s)
	return vuo
}

// SetMaxAtmospheringSpeed sets the "max_atmosphering_speed" field.
func (vuo *VehicleUpdateOne) SetMaxAtmospheringSpeed(s string) *VehicleUpdateOne {
	vuo.mutation.SetMaxAtmospheringSpeed(s)
	return vuo
}

// SetModel sets the "model" field.
func (vuo *VehicleUpdateOne) SetModel(s string) *VehicleUpdateOne {
	vuo.mutation.SetModel(s)
	return vuo
}

// SetName sets the "name" field.
func (vuo *VehicleUpdateOne) SetName(s string) *VehicleUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetPassengerCapacity sets the "passenger_capacity" field.
func (vuo *VehicleUpdateOne) SetPassengerCapacity(i int) *VehicleUpdateOne {
	vuo.mutation.ResetPassengerCapacity()
	vuo.mutation.SetPassengerCapacity(i)
	return vuo
}

// SetNillablePassengerCapacity sets the "passenger_capacity" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillablePassengerCapacity(i *int) *VehicleUpdateOne {
	if i != nil {
		vuo.SetPassengerCapacity(*i)
	}
	return vuo
}

// AddPassengerCapacity adds i to the "passenger_capacity" field.
func (vuo *VehicleUpdateOne) AddPassengerCapacity(i int) *VehicleUpdateOne {
	vuo.mutation.AddPassengerCapacity(i)
	return vuo
}

// ClearPassengerCapacity clears the value of the "passenger_capacity" field.
func (vuo *VehicleUpdateOne) ClearPassengerCapacity() *VehicleUpdateOne {
	vuo.mutation.ClearPassengerCapacity()
	return vuo
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (vuo *VehicleUpdateOne) AddAppearedInIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.AddAppearedInIDs(ids...)
	return vuo
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (vuo *VehicleUpdateOne) AddAppearedIn(f ...*Film) *VehicleUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vuo.AddAppearedInIDs(ids...)
}

// AddPilotedByIDs adds the "piloted_by" edge to the Person entity by IDs.
func (vuo *VehicleUpdateOne) AddPilotedByIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.AddPilotedByIDs(ids...)
	return vuo
}

// AddPilotedBy adds the "piloted_by" edges to the Person entity.
func (vuo *VehicleUpdateOne) AddPilotedBy(p ...*Person) *VehicleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.AddPilotedByIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vuo *VehicleUpdateOne) Mutation() *VehicleMutation {
	return vuo.mutation
}

// ClearAppearedIn clears all "appeared_in" edges to the Film entity.
func (vuo *VehicleUpdateOne) ClearAppearedIn() *VehicleUpdateOne {
	vuo.mutation.ClearAppearedIn()
	return vuo
}

// RemoveAppearedInIDs removes the "appeared_in" edge to Film entities by IDs.
func (vuo *VehicleUpdateOne) RemoveAppearedInIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.RemoveAppearedInIDs(ids...)
	return vuo
}

// RemoveAppearedIn removes "appeared_in" edges to Film entities.
func (vuo *VehicleUpdateOne) RemoveAppearedIn(f ...*Film) *VehicleUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vuo.RemoveAppearedInIDs(ids...)
}

// ClearPilotedBy clears all "piloted_by" edges to the Person entity.
func (vuo *VehicleUpdateOne) ClearPilotedBy() *VehicleUpdateOne {
	vuo.mutation.ClearPilotedBy()
	return vuo
}

// RemovePilotedByIDs removes the "piloted_by" edge to Person entities by IDs.
func (vuo *VehicleUpdateOne) RemovePilotedByIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.RemovePilotedByIDs(ids...)
	return vuo
}

// RemovePilotedBy removes "piloted_by" edges to Person entities.
func (vuo *VehicleUpdateOne) RemovePilotedBy(p ...*Person) *VehicleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.RemovePilotedByIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vehicle entity.
func (vuo *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	var (
		err  error
		node *Vehicle
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vehicle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.CargoCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCargoCapacity,
		})
	}
	if value, ok := vuo.mutation.AddedCargoCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCargoCapacity,
		})
	}
	if vuo.mutation.CargoCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldCargoCapacity,
		})
	}
	if value, ok := vuo.mutation.Consumables(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldConsumables,
		})
	}
	if value, ok := vuo.mutation.CostInCredits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCostInCredits,
		})
	}
	if value, ok := vuo.mutation.AddedCostInCredits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCostInCredits,
		})
	}
	if value, ok := vuo.mutation.Crew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldCrew,
		})
	}
	if value, ok := vuo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vehicle.FieldLength,
		})
	}
	if value, ok := vuo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vehicle.FieldLength,
		})
	}
	if vuo.mutation.LengthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: vehicle.FieldLength,
		})
	}
	if value, ok := vuo.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldManufacturer,
		})
	}
	if value, ok := vuo.mutation.MaxAtmospheringSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldMaxAtmospheringSpeed,
		})
	}
	if value, ok := vuo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldModel,
		})
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldName,
		})
	}
	if value, ok := vuo.mutation.PassengerCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldPassengerCapacity,
		})
	}
	if value, ok := vuo.mutation.AddedPassengerCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldPassengerCapacity,
		})
	}
	if vuo.mutation.PassengerCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldPassengerCapacity,
		})
	}
	if vuo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedAppearedInIDs(); len(nodes) > 0 && !vuo.mutation.AppearedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedPilotedByIDs(); len(nodes) > 0 && !vuo.mutation.PilotedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PilotedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vehicle{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
