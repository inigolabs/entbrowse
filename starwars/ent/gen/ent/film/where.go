// Code generated by entc, DO NOT EDIT.

package film

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Director applies equality check predicate on the "director" field. It's identical to DirectorEQ.
func Director(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirector), v))
	})
}

// EpisodeID applies equality check predicate on the "episode_id" field. It's identical to EpisodeIDEQ.
func EpisodeID(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpisodeID), v))
	})
}

// OpeningCrawl applies equality check predicate on the "opening_crawl" field. It's identical to OpeningCrawlEQ.
func OpeningCrawl(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpeningCrawl), v))
	})
}

// Producer applies equality check predicate on the "producer" field. It's identical to ProducerEQ.
func Producer(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProducer), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// DirectorEQ applies the EQ predicate on the "director" field.
func DirectorEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirector), v))
	})
}

// DirectorNEQ applies the NEQ predicate on the "director" field.
func DirectorNEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirector), v))
	})
}

// DirectorIn applies the In predicate on the "director" field.
func DirectorIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDirector), v...))
	})
}

// DirectorNotIn applies the NotIn predicate on the "director" field.
func DirectorNotIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDirector), v...))
	})
}

// DirectorGT applies the GT predicate on the "director" field.
func DirectorGT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDirector), v))
	})
}

// DirectorGTE applies the GTE predicate on the "director" field.
func DirectorGTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDirector), v))
	})
}

// DirectorLT applies the LT predicate on the "director" field.
func DirectorLT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDirector), v))
	})
}

// DirectorLTE applies the LTE predicate on the "director" field.
func DirectorLTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDirector), v))
	})
}

// DirectorContains applies the Contains predicate on the "director" field.
func DirectorContains(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDirector), v))
	})
}

// DirectorHasPrefix applies the HasPrefix predicate on the "director" field.
func DirectorHasPrefix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDirector), v))
	})
}

// DirectorHasSuffix applies the HasSuffix predicate on the "director" field.
func DirectorHasSuffix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDirector), v))
	})
}

// DirectorEqualFold applies the EqualFold predicate on the "director" field.
func DirectorEqualFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDirector), v))
	})
}

// DirectorContainsFold applies the ContainsFold predicate on the "director" field.
func DirectorContainsFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDirector), v))
	})
}

// EpisodeIDEQ applies the EQ predicate on the "episode_id" field.
func EpisodeIDEQ(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDNEQ applies the NEQ predicate on the "episode_id" field.
func EpisodeIDNEQ(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDIn applies the In predicate on the "episode_id" field.
func EpisodeIDIn(vs ...int) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEpisodeID), v...))
	})
}

// EpisodeIDNotIn applies the NotIn predicate on the "episode_id" field.
func EpisodeIDNotIn(vs ...int) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEpisodeID), v...))
	})
}

// EpisodeIDGT applies the GT predicate on the "episode_id" field.
func EpisodeIDGT(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDGTE applies the GTE predicate on the "episode_id" field.
func EpisodeIDGTE(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDLT applies the LT predicate on the "episode_id" field.
func EpisodeIDLT(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDLTE applies the LTE predicate on the "episode_id" field.
func EpisodeIDLTE(v int) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEpisodeID), v))
	})
}

// OpeningCrawlEQ applies the EQ predicate on the "opening_crawl" field.
func OpeningCrawlEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlNEQ applies the NEQ predicate on the "opening_crawl" field.
func OpeningCrawlNEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlIn applies the In predicate on the "opening_crawl" field.
func OpeningCrawlIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpeningCrawl), v...))
	})
}

// OpeningCrawlNotIn applies the NotIn predicate on the "opening_crawl" field.
func OpeningCrawlNotIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpeningCrawl), v...))
	})
}

// OpeningCrawlGT applies the GT predicate on the "opening_crawl" field.
func OpeningCrawlGT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlGTE applies the GTE predicate on the "opening_crawl" field.
func OpeningCrawlGTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlLT applies the LT predicate on the "opening_crawl" field.
func OpeningCrawlLT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlLTE applies the LTE predicate on the "opening_crawl" field.
func OpeningCrawlLTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlContains applies the Contains predicate on the "opening_crawl" field.
func OpeningCrawlContains(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlHasPrefix applies the HasPrefix predicate on the "opening_crawl" field.
func OpeningCrawlHasPrefix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlHasSuffix applies the HasSuffix predicate on the "opening_crawl" field.
func OpeningCrawlHasSuffix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlEqualFold applies the EqualFold predicate on the "opening_crawl" field.
func OpeningCrawlEqualFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlContainsFold applies the ContainsFold predicate on the "opening_crawl" field.
func OpeningCrawlContainsFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOpeningCrawl), v))
	})
}

// ProducerEQ applies the EQ predicate on the "producer" field.
func ProducerEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProducer), v))
	})
}

// ProducerNEQ applies the NEQ predicate on the "producer" field.
func ProducerNEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProducer), v))
	})
}

// ProducerIn applies the In predicate on the "producer" field.
func ProducerIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProducer), v...))
	})
}

// ProducerNotIn applies the NotIn predicate on the "producer" field.
func ProducerNotIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProducer), v...))
	})
}

// ProducerGT applies the GT predicate on the "producer" field.
func ProducerGT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProducer), v))
	})
}

// ProducerGTE applies the GTE predicate on the "producer" field.
func ProducerGTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProducer), v))
	})
}

// ProducerLT applies the LT predicate on the "producer" field.
func ProducerLT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProducer), v))
	})
}

// ProducerLTE applies the LTE predicate on the "producer" field.
func ProducerLTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProducer), v))
	})
}

// ProducerContains applies the Contains predicate on the "producer" field.
func ProducerContains(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProducer), v))
	})
}

// ProducerHasPrefix applies the HasPrefix predicate on the "producer" field.
func ProducerHasPrefix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProducer), v))
	})
}

// ProducerHasSuffix applies the HasSuffix predicate on the "producer" field.
func ProducerHasSuffix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProducer), v))
	})
}

// ProducerEqualFold applies the EqualFold predicate on the "producer" field.
func ProducerEqualFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProducer), v))
	})
}

// ProducerContainsFold applies the ContainsFold predicate on the "producer" field.
func ProducerContainsFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProducer), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Film {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Film(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// HasHasPerson applies the HasEdge predicate on the "has_person" edge.
func HasHasPerson() predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasPersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasPersonTable, HasPersonPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasPersonWith applies the HasEdge predicate on the "has_person" edge with a given conditions (other predicates).
func HasHasPersonWith(preds ...predicate.Person) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasPersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasPersonTable, HasPersonPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHasPlanet applies the HasEdge predicate on the "has_planet" edge.
func HasHasPlanet() predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasPlanetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasPlanetTable, HasPlanetPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasPlanetWith applies the HasEdge predicate on the "has_planet" edge with a given conditions (other predicates).
func HasHasPlanetWith(preds ...predicate.Planet) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasPlanetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasPlanetTable, HasPlanetPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHasStarship applies the HasEdge predicate on the "has_starship" edge.
func HasHasStarship() predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasStarshipTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasStarshipTable, HasStarshipPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasStarshipWith applies the HasEdge predicate on the "has_starship" edge with a given conditions (other predicates).
func HasHasStarshipWith(preds ...predicate.Starship) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasStarshipInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasStarshipTable, HasStarshipPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHasVehicle applies the HasEdge predicate on the "has_vehicle" edge.
func HasHasVehicle() predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasVehicleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasVehicleTable, HasVehiclePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasVehicleWith applies the HasEdge predicate on the "has_vehicle" edge with a given conditions (other predicates).
func HasHasVehicleWith(preds ...predicate.Vehicle) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasVehicleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasVehicleTable, HasVehiclePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHasSpecies applies the HasEdge predicate on the "has_species" edge.
func HasHasSpecies() predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasSpeciesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasSpeciesTable, HasSpeciesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasSpeciesWith applies the HasEdge predicate on the "has_species" edge with a given conditions (other predicates).
func HasHasSpeciesWith(preds ...predicate.Species) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HasSpeciesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasSpeciesTable, HasSpeciesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Film) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Film) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Film) predicate.Film {
	return predicate.Film(func(s *sql.Selector) {
		p(s.Not())
	})
}
