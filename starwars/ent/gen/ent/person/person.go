// Code generated by entc, DO NOT EDIT.

package person

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBirthYear holds the string denoting the birth_year field in the database.
	FieldBirthYear = "birth_year"
	// FieldEyeColor holds the string denoting the eye_color field in the database.
	FieldEyeColor = "eye_color"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldHairColor holds the string denoting the hair_color field in the database.
	FieldHairColor = "hair_color"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldMass holds the string denoting the mass field in the database.
	FieldMass = "mass"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSkinColor holds the string denoting the skin_color field in the database.
	FieldSkinColor = "skin_color"
	// EdgePilotedStarship holds the string denoting the piloted_starship edge name in mutations.
	EdgePilotedStarship = "piloted_starship"
	// EdgePilotedVehicle holds the string denoting the piloted_vehicle edge name in mutations.
	EdgePilotedVehicle = "piloted_vehicle"
	// EdgeIsOfType holds the string denoting the is_of_type edge name in mutations.
	EdgeIsOfType = "is_of_type"
	// EdgeAppearedIn holds the string denoting the appeared_in edge name in mutations.
	EdgeAppearedIn = "appeared_in"
	// EdgeFromPlanet holds the string denoting the from_planet edge name in mutations.
	EdgeFromPlanet = "from_planet"
	// Table holds the table name of the person in the database.
	Table = "persons"
	// PilotedStarshipTable is the table that holds the piloted_starship relation/edge. The primary key declared below.
	PilotedStarshipTable = "person_piloted_starship"
	// PilotedStarshipInverseTable is the table name for the Starship entity.
	// It exists in this package in order to avoid circular dependency with the "starship" package.
	PilotedStarshipInverseTable = "starships"
	// PilotedVehicleTable is the table that holds the piloted_vehicle relation/edge. The primary key declared below.
	PilotedVehicleTable = "person_piloted_vehicle"
	// PilotedVehicleInverseTable is the table name for the Vehicle entity.
	// It exists in this package in order to avoid circular dependency with the "vehicle" package.
	PilotedVehicleInverseTable = "vehicles"
	// IsOfTypeTable is the table that holds the is_of_type relation/edge. The primary key declared below.
	IsOfTypeTable = "person_is_of_type"
	// IsOfTypeInverseTable is the table name for the Species entity.
	// It exists in this package in order to avoid circular dependency with the "species" package.
	IsOfTypeInverseTable = "species"
	// AppearedInTable is the table that holds the appeared_in relation/edge. The primary key declared below.
	AppearedInTable = "film_has_person"
	// AppearedInInverseTable is the table name for the Film entity.
	// It exists in this package in order to avoid circular dependency with the "film" package.
	AppearedInInverseTable = "films"
	// FromPlanetTable is the table that holds the from_planet relation/edge. The primary key declared below.
	FromPlanetTable = "planet_home_to"
	// FromPlanetInverseTable is the table name for the Planet entity.
	// It exists in this package in order to avoid circular dependency with the "planet" package.
	FromPlanetInverseTable = "planets"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldBirthYear,
	FieldEyeColor,
	FieldGender,
	FieldHairColor,
	FieldHeight,
	FieldMass,
	FieldName,
	FieldSkinColor,
}

var (
	// PilotedStarshipPrimaryKey and PilotedStarshipColumn2 are the table columns denoting the
	// primary key for the piloted_starship relation (M2M).
	PilotedStarshipPrimaryKey = []string{"person_id", "starship_id"}
	// PilotedVehiclePrimaryKey and PilotedVehicleColumn2 are the table columns denoting the
	// primary key for the piloted_vehicle relation (M2M).
	PilotedVehiclePrimaryKey = []string{"person_id", "vehicle_id"}
	// IsOfTypePrimaryKey and IsOfTypeColumn2 are the table columns denoting the
	// primary key for the is_of_type relation (M2M).
	IsOfTypePrimaryKey = []string{"person_id", "species_id"}
	// AppearedInPrimaryKey and AppearedInColumn2 are the table columns denoting the
	// primary key for the appeared_in relation (M2M).
	AppearedInPrimaryKey = []string{"film_id", "person_id"}
	// FromPlanetPrimaryKey and FromPlanetColumn2 are the table columns denoting the
	// primary key for the from_planet relation (M2M).
	FromPlanetPrimaryKey = []string{"planet_id", "person_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
