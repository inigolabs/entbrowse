// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
)

// PlanetCreate is the builder for creating a Planet entity.
type PlanetCreate struct {
	config
	mutation *PlanetMutation
	hooks    []Hook
}

// SetClimate sets the "climate" field.
func (pc *PlanetCreate) SetClimate(s string) *PlanetCreate {
	pc.mutation.SetClimate(s)
	return pc
}

// SetDiameter sets the "diameter" field.
func (pc *PlanetCreate) SetDiameter(i int) *PlanetCreate {
	pc.mutation.SetDiameter(i)
	return pc
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (pc *PlanetCreate) SetNillableDiameter(i *int) *PlanetCreate {
	if i != nil {
		pc.SetDiameter(*i)
	}
	return pc
}

// SetGravity sets the "gravity" field.
func (pc *PlanetCreate) SetGravity(s string) *PlanetCreate {
	pc.mutation.SetGravity(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PlanetCreate) SetName(s string) *PlanetCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetOrbitalPeriod sets the "orbital_period" field.
func (pc *PlanetCreate) SetOrbitalPeriod(s string) *PlanetCreate {
	pc.mutation.SetOrbitalPeriod(s)
	return pc
}

// SetPopulation sets the "population" field.
func (pc *PlanetCreate) SetPopulation(i int) *PlanetCreate {
	pc.mutation.SetPopulation(i)
	return pc
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulation(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPopulation(*i)
	}
	return pc
}

// SetRotationPeriod sets the "rotation_period" field.
func (pc *PlanetCreate) SetRotationPeriod(s string) *PlanetCreate {
	pc.mutation.SetRotationPeriod(s)
	return pc
}

// SetSurfaceWater sets the "surface_water" field.
func (pc *PlanetCreate) SetSurfaceWater(s string) *PlanetCreate {
	pc.mutation.SetSurfaceWater(s)
	return pc
}

// SetTerrain sets the "terrain" field.
func (pc *PlanetCreate) SetTerrain(s string) *PlanetCreate {
	pc.mutation.SetTerrain(s)
	return pc
}

// AddHomeToIDs adds the "home_to" edge to the Person entity by IDs.
func (pc *PlanetCreate) AddHomeToIDs(ids ...int) *PlanetCreate {
	pc.mutation.AddHomeToIDs(ids...)
	return pc
}

// AddHomeTo adds the "home_to" edges to the Person entity.
func (pc *PlanetCreate) AddHomeTo(p ...*Person) *PlanetCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddHomeToIDs(ids...)
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (pc *PlanetCreate) AddAppearedInIDs(ids ...int) *PlanetCreate {
	pc.mutation.AddAppearedInIDs(ids...)
	return pc
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (pc *PlanetCreate) AddAppearedIn(f ...*Film) *PlanetCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pc.AddAppearedInIDs(ids...)
}

// AddOriginOfIDs adds the "origin_of" edge to the Species entity by IDs.
func (pc *PlanetCreate) AddOriginOfIDs(ids ...int) *PlanetCreate {
	pc.mutation.AddOriginOfIDs(ids...)
	return pc
}

// AddOriginOf adds the "origin_of" edges to the Species entity.
func (pc *PlanetCreate) AddOriginOf(s ...*Species) *PlanetCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddOriginOfIDs(ids...)
}

// Mutation returns the PlanetMutation object of the builder.
func (pc *PlanetCreate) Mutation() *PlanetMutation {
	return pc.mutation
}

// Save creates the Planet in the database.
func (pc *PlanetCreate) Save(ctx context.Context) (*Planet, error) {
	var (
		err  error
		node *Planet
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanetCreate) SaveX(ctx context.Context) *Planet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanetCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanetCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanetCreate) check() error {
	if _, ok := pc.mutation.Climate(); !ok {
		return &ValidationError{Name: "climate", err: errors.New(`ent: missing required field "Planet.climate"`)}
	}
	if _, ok := pc.mutation.Gravity(); !ok {
		return &ValidationError{Name: "gravity", err: errors.New(`ent: missing required field "Planet.gravity"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Planet.name"`)}
	}
	if _, ok := pc.mutation.OrbitalPeriod(); !ok {
		return &ValidationError{Name: "orbital_period", err: errors.New(`ent: missing required field "Planet.orbital_period"`)}
	}
	if _, ok := pc.mutation.RotationPeriod(); !ok {
		return &ValidationError{Name: "rotation_period", err: errors.New(`ent: missing required field "Planet.rotation_period"`)}
	}
	if _, ok := pc.mutation.SurfaceWater(); !ok {
		return &ValidationError{Name: "surface_water", err: errors.New(`ent: missing required field "Planet.surface_water"`)}
	}
	if _, ok := pc.mutation.Terrain(); !ok {
		return &ValidationError{Name: "terrain", err: errors.New(`ent: missing required field "Planet.terrain"`)}
	}
	return nil
}

func (pc *PlanetCreate) sqlSave(ctx context.Context) (*Planet, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PlanetCreate) createSpec() (*Planet, *sqlgraph.CreateSpec) {
	var (
		_node = &Planet{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: planet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Climate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldClimate,
		})
		_node.Climate = value
	}
	if value, ok := pc.mutation.Diameter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldDiameter,
		})
		_node.Diameter = value
	}
	if value, ok := pc.mutation.Gravity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldGravity,
		})
		_node.Gravity = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.OrbitalPeriod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldOrbitalPeriod,
		})
		_node.OrbitalPeriod = value
	}
	if value, ok := pc.mutation.Population(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulation,
		})
		_node.Population = value
	}
	if value, ok := pc.mutation.RotationPeriod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldRotationPeriod,
		})
		_node.RotationPeriod = value
	}
	if value, ok := pc.mutation.SurfaceWater(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldSurfaceWater,
		})
		_node.SurfaceWater = value
	}
	if value, ok := pc.mutation.Terrain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldTerrain,
		})
		_node.Terrain = value
	}
	if nodes := pc.mutation.HomeToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   planet.HomeToTable,
			Columns: planet.HomeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.AppearedInTable,
			Columns: planet.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OriginOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   planet.OriginOfTable,
			Columns: planet.OriginOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlanetCreateBulk is the builder for creating many Planet entities in bulk.
type PlanetCreateBulk struct {
	config
	builders []*PlanetCreate
}

// Save creates the Planet entities in the database.
func (pcb *PlanetCreateBulk) Save(ctx context.Context) ([]*Planet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Planet, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanetCreateBulk) SaveX(ctx context.Context) []*Planet {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanetCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanetCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
