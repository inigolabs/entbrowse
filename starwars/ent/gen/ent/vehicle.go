// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
)

// Vehicle is the model entity for the Vehicle schema.
type Vehicle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CargoCapacity holds the value of the "cargo_capacity" field.
	CargoCapacity int `json:"cargo_capacity,omitempty"`
	// Consumables holds the value of the "consumables" field.
	Consumables string `json:"consumables,omitempty"`
	// CostInCredits holds the value of the "cost_in_credits" field.
	CostInCredits int `json:"cost_in_credits,omitempty"`
	// Crew holds the value of the "crew" field.
	Crew string `json:"crew,omitempty"`
	// Length holds the value of the "length" field.
	Length *float64 `json:"length,omitempty"`
	// Manufacturer holds the value of the "manufacturer" field.
	Manufacturer string `json:"manufacturer,omitempty"`
	// MaxAtmospheringSpeed holds the value of the "max_atmosphering_speed" field.
	MaxAtmospheringSpeed string `json:"max_atmosphering_speed,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PassengerCapacity holds the value of the "passenger_capacity" field.
	PassengerCapacity int `json:"passenger_capacity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VehicleQuery when eager-loading is set.
	Edges VehicleEdges `json:"edges"`
}

// VehicleEdges holds the relations/edges for other nodes in the graph.
type VehicleEdges struct {
	// AppearedIn holds the value of the appeared_in edge.
	AppearedIn []*Film `json:"appeared_in,omitempty"`
	// PilotedBy holds the value of the piloted_by edge.
	PilotedBy []*Person `json:"piloted_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppearedInOrErr returns the AppearedIn value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleEdges) AppearedInOrErr() ([]*Film, error) {
	if e.loadedTypes[0] {
		return e.AppearedIn, nil
	}
	return nil, &NotLoadedError{edge: "appeared_in"}
}

// PilotedByOrErr returns the PilotedBy value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleEdges) PilotedByOrErr() ([]*Person, error) {
	if e.loadedTypes[1] {
		return e.PilotedBy, nil
	}
	return nil, &NotLoadedError{edge: "piloted_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vehicle) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldLength:
			values[i] = new(sql.NullFloat64)
		case vehicle.FieldID, vehicle.FieldCargoCapacity, vehicle.FieldCostInCredits, vehicle.FieldPassengerCapacity:
			values[i] = new(sql.NullInt64)
		case vehicle.FieldConsumables, vehicle.FieldCrew, vehicle.FieldManufacturer, vehicle.FieldMaxAtmospheringSpeed, vehicle.FieldModel, vehicle.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vehicle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vehicle fields.
func (v *Vehicle) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vehicle.FieldCargoCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cargo_capacity", values[i])
			} else if value.Valid {
				v.CargoCapacity = int(value.Int64)
			}
		case vehicle.FieldConsumables:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consumables", values[i])
			} else if value.Valid {
				v.Consumables = value.String
			}
		case vehicle.FieldCostInCredits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost_in_credits", values[i])
			} else if value.Valid {
				v.CostInCredits = int(value.Int64)
			}
		case vehicle.FieldCrew:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crew", values[i])
			} else if value.Valid {
				v.Crew = value.String
			}
		case vehicle.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				v.Length = new(float64)
				*v.Length = value.Float64
			}
		case vehicle.FieldManufacturer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manufacturer", values[i])
			} else if value.Valid {
				v.Manufacturer = value.String
			}
		case vehicle.FieldMaxAtmospheringSpeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field max_atmosphering_speed", values[i])
			} else if value.Valid {
				v.MaxAtmospheringSpeed = value.String
			}
		case vehicle.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				v.Model = value.String
			}
		case vehicle.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vehicle.FieldPassengerCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passenger_capacity", values[i])
			} else if value.Valid {
				v.PassengerCapacity = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAppearedIn queries the "appeared_in" edge of the Vehicle entity.
func (v *Vehicle) QueryAppearedIn() *FilmQuery {
	return (&VehicleClient{config: v.config}).QueryAppearedIn(v)
}

// QueryPilotedBy queries the "piloted_by" edge of the Vehicle entity.
func (v *Vehicle) QueryPilotedBy() *PersonQuery {
	return (&VehicleClient{config: v.config}).QueryPilotedBy(v)
}

// Update returns a builder for updating this Vehicle.
// Note that you need to call Vehicle.Unwrap() before calling this method if this Vehicle
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vehicle) Update() *VehicleUpdateOne {
	return (&VehicleClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vehicle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vehicle) Unwrap() *Vehicle {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vehicle is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vehicle) String() string {
	var builder strings.Builder
	builder.WriteString("Vehicle(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", cargo_capacity=")
	builder.WriteString(fmt.Sprintf("%v", v.CargoCapacity))
	builder.WriteString(", consumables=")
	builder.WriteString(v.Consumables)
	builder.WriteString(", cost_in_credits=")
	builder.WriteString(fmt.Sprintf("%v", v.CostInCredits))
	builder.WriteString(", crew=")
	builder.WriteString(v.Crew)
	if v := v.Length; v != nil {
		builder.WriteString(", length=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", manufacturer=")
	builder.WriteString(v.Manufacturer)
	builder.WriteString(", max_atmosphering_speed=")
	builder.WriteString(v.MaxAtmospheringSpeed)
	builder.WriteString(", model=")
	builder.WriteString(v.Model)
	builder.WriteString(", name=")
	builder.WriteString(v.Name)
	builder.WriteString(", passenger_capacity=")
	builder.WriteString(fmt.Sprintf("%v", v.PassengerCapacity))
	builder.WriteByte(')')
	return builder.String()
}

// Vehicles is a parsable slice of Vehicle.
type Vehicles []*Vehicle

func (v Vehicles) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
