// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
)

// VehicleCreate is the builder for creating a Vehicle entity.
type VehicleCreate struct {
	config
	mutation *VehicleMutation
	hooks    []Hook
}

// SetCargoCapacity sets the "cargo_capacity" field.
func (vc *VehicleCreate) SetCargoCapacity(i int) *VehicleCreate {
	vc.mutation.SetCargoCapacity(i)
	return vc
}

// SetNillableCargoCapacity sets the "cargo_capacity" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCargoCapacity(i *int) *VehicleCreate {
	if i != nil {
		vc.SetCargoCapacity(*i)
	}
	return vc
}

// SetConsumables sets the "consumables" field.
func (vc *VehicleCreate) SetConsumables(s string) *VehicleCreate {
	vc.mutation.SetConsumables(s)
	return vc
}

// SetCostInCredits sets the "cost_in_credits" field.
func (vc *VehicleCreate) SetCostInCredits(i int) *VehicleCreate {
	vc.mutation.SetCostInCredits(i)
	return vc
}

// SetCrew sets the "crew" field.
func (vc *VehicleCreate) SetCrew(s string) *VehicleCreate {
	vc.mutation.SetCrew(s)
	return vc
}

// SetLength sets the "length" field.
func (vc *VehicleCreate) SetLength(f float64) *VehicleCreate {
	vc.mutation.SetLength(f)
	return vc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableLength(f *float64) *VehicleCreate {
	if f != nil {
		vc.SetLength(*f)
	}
	return vc
}

// SetManufacturer sets the "manufacturer" field.
func (vc *VehicleCreate) SetManufacturer(s string) *VehicleCreate {
	vc.mutation.SetManufacturer(s)
	return vc
}

// SetMaxAtmospheringSpeed sets the "max_atmosphering_speed" field.
func (vc *VehicleCreate) SetMaxAtmospheringSpeed(s string) *VehicleCreate {
	vc.mutation.SetMaxAtmospheringSpeed(s)
	return vc
}

// SetModel sets the "model" field.
func (vc *VehicleCreate) SetModel(s string) *VehicleCreate {
	vc.mutation.SetModel(s)
	return vc
}

// SetName sets the "name" field.
func (vc *VehicleCreate) SetName(s string) *VehicleCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetPassengerCapacity sets the "passenger_capacity" field.
func (vc *VehicleCreate) SetPassengerCapacity(i int) *VehicleCreate {
	vc.mutation.SetPassengerCapacity(i)
	return vc
}

// SetNillablePassengerCapacity sets the "passenger_capacity" field if the given value is not nil.
func (vc *VehicleCreate) SetNillablePassengerCapacity(i *int) *VehicleCreate {
	if i != nil {
		vc.SetPassengerCapacity(*i)
	}
	return vc
}

// AddAppearedInIDs adds the "appeared_in" edge to the Film entity by IDs.
func (vc *VehicleCreate) AddAppearedInIDs(ids ...int) *VehicleCreate {
	vc.mutation.AddAppearedInIDs(ids...)
	return vc
}

// AddAppearedIn adds the "appeared_in" edges to the Film entity.
func (vc *VehicleCreate) AddAppearedIn(f ...*Film) *VehicleCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return vc.AddAppearedInIDs(ids...)
}

// AddPilotedByIDs adds the "piloted_by" edge to the Person entity by IDs.
func (vc *VehicleCreate) AddPilotedByIDs(ids ...int) *VehicleCreate {
	vc.mutation.AddPilotedByIDs(ids...)
	return vc
}

// AddPilotedBy adds the "piloted_by" edges to the Person entity.
func (vc *VehicleCreate) AddPilotedBy(p ...*Person) *VehicleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vc.AddPilotedByIDs(ids...)
}

// Mutation returns the VehicleMutation object of the builder.
func (vc *VehicleCreate) Mutation() *VehicleMutation {
	return vc.mutation
}

// Save creates the Vehicle in the database.
func (vc *VehicleCreate) Save(ctx context.Context) (*Vehicle, error) {
	var (
		err  error
		node *Vehicle
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VehicleCreate) SaveX(ctx context.Context) *Vehicle {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VehicleCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VehicleCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VehicleCreate) check() error {
	if _, ok := vc.mutation.Consumables(); !ok {
		return &ValidationError{Name: "consumables", err: errors.New(`ent: missing required field "Vehicle.consumables"`)}
	}
	if _, ok := vc.mutation.CostInCredits(); !ok {
		return &ValidationError{Name: "cost_in_credits", err: errors.New(`ent: missing required field "Vehicle.cost_in_credits"`)}
	}
	if _, ok := vc.mutation.Crew(); !ok {
		return &ValidationError{Name: "crew", err: errors.New(`ent: missing required field "Vehicle.crew"`)}
	}
	if _, ok := vc.mutation.Manufacturer(); !ok {
		return &ValidationError{Name: "manufacturer", err: errors.New(`ent: missing required field "Vehicle.manufacturer"`)}
	}
	if _, ok := vc.mutation.MaxAtmospheringSpeed(); !ok {
		return &ValidationError{Name: "max_atmosphering_speed", err: errors.New(`ent: missing required field "Vehicle.max_atmosphering_speed"`)}
	}
	if _, ok := vc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "Vehicle.model"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Vehicle.name"`)}
	}
	return nil
}

func (vc *VehicleCreate) sqlSave(ctx context.Context) (*Vehicle, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VehicleCreate) createSpec() (*Vehicle, *sqlgraph.CreateSpec) {
	var (
		_node = &Vehicle{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehicle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.CargoCapacity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCargoCapacity,
		})
		_node.CargoCapacity = value
	}
	if value, ok := vc.mutation.Consumables(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldConsumables,
		})
		_node.Consumables = value
	}
	if value, ok := vc.mutation.CostInCredits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCostInCredits,
		})
		_node.CostInCredits = value
	}
	if value, ok := vc.mutation.Crew(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldCrew,
		})
		_node.Crew = value
	}
	if value, ok := vc.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vehicle.FieldLength,
		})
		_node.Length = &value
	}
	if value, ok := vc.mutation.Manufacturer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldManufacturer,
		})
		_node.Manufacturer = value
	}
	if value, ok := vc.mutation.MaxAtmospheringSpeed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldMaxAtmospheringSpeed,
		})
		_node.MaxAtmospheringSpeed = value
	}
	if value, ok := vc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldModel,
		})
		_node.Model = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldName,
		})
		_node.Name = value
	}
	if value, ok := vc.mutation.PassengerCapacity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldPassengerCapacity,
		})
		_node.PassengerCapacity = value
	}
	if nodes := vc.mutation.AppearedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.AppearedInTable,
			Columns: vehicle.AppearedInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: film.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.PilotedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vehicle.PilotedByTable,
			Columns: vehicle.PilotedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VehicleCreateBulk is the builder for creating many Vehicle entities in bulk.
type VehicleCreateBulk struct {
	config
	builders []*VehicleCreate
}

// Save creates the Vehicle entities in the database.
func (vcb *VehicleCreateBulk) Save(ctx context.Context) ([]*Vehicle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vehicle, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VehicleCreateBulk) SaveX(ctx context.Context) []*Vehicle {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VehicleCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VehicleCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
