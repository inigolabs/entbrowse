// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/film"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/person"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/planet"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/species"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/starship"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/vehicle"
)

// FilmUpdate is the builder for updating Film entities.
type FilmUpdate struct {
	config
	hooks    []Hook
	mutation *FilmMutation
}

// Where appends a list predicates to the FilmUpdate builder.
func (fu *FilmUpdate) Where(ps ...predicate.Film) *FilmUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetDirector sets the "director" field.
func (fu *FilmUpdate) SetDirector(s string) *FilmUpdate {
	fu.mutation.SetDirector(s)
	return fu
}

// SetEpisodeID sets the "episode_id" field.
func (fu *FilmUpdate) SetEpisodeID(i int) *FilmUpdate {
	fu.mutation.ResetEpisodeID()
	fu.mutation.SetEpisodeID(i)
	return fu
}

// AddEpisodeID adds i to the "episode_id" field.
func (fu *FilmUpdate) AddEpisodeID(i int) *FilmUpdate {
	fu.mutation.AddEpisodeID(i)
	return fu
}

// SetOpeningCrawl sets the "opening_crawl" field.
func (fu *FilmUpdate) SetOpeningCrawl(s string) *FilmUpdate {
	fu.mutation.SetOpeningCrawl(s)
	return fu
}

// SetProducer sets the "producer" field.
func (fu *FilmUpdate) SetProducer(s string) *FilmUpdate {
	fu.mutation.SetProducer(s)
	return fu
}

// SetTitle sets the "title" field.
func (fu *FilmUpdate) SetTitle(s string) *FilmUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// AddHasPersonIDs adds the "has_person" edge to the Person entity by IDs.
func (fu *FilmUpdate) AddHasPersonIDs(ids ...int) *FilmUpdate {
	fu.mutation.AddHasPersonIDs(ids...)
	return fu
}

// AddHasPerson adds the "has_person" edges to the Person entity.
func (fu *FilmUpdate) AddHasPerson(p ...*Person) *FilmUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddHasPersonIDs(ids...)
}

// AddHasPlanetIDs adds the "has_planet" edge to the Planet entity by IDs.
func (fu *FilmUpdate) AddHasPlanetIDs(ids ...int) *FilmUpdate {
	fu.mutation.AddHasPlanetIDs(ids...)
	return fu
}

// AddHasPlanet adds the "has_planet" edges to the Planet entity.
func (fu *FilmUpdate) AddHasPlanet(p ...*Planet) *FilmUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddHasPlanetIDs(ids...)
}

// AddHasStarshipIDs adds the "has_starship" edge to the Starship entity by IDs.
func (fu *FilmUpdate) AddHasStarshipIDs(ids ...int) *FilmUpdate {
	fu.mutation.AddHasStarshipIDs(ids...)
	return fu
}

// AddHasStarship adds the "has_starship" edges to the Starship entity.
func (fu *FilmUpdate) AddHasStarship(s ...*Starship) *FilmUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddHasStarshipIDs(ids...)
}

// AddHasVehicleIDs adds the "has_vehicle" edge to the Vehicle entity by IDs.
func (fu *FilmUpdate) AddHasVehicleIDs(ids ...int) *FilmUpdate {
	fu.mutation.AddHasVehicleIDs(ids...)
	return fu
}

// AddHasVehicle adds the "has_vehicle" edges to the Vehicle entity.
func (fu *FilmUpdate) AddHasVehicle(v ...*Vehicle) *FilmUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fu.AddHasVehicleIDs(ids...)
}

// AddHasSpecyIDs adds the "has_species" edge to the Species entity by IDs.
func (fu *FilmUpdate) AddHasSpecyIDs(ids ...int) *FilmUpdate {
	fu.mutation.AddHasSpecyIDs(ids...)
	return fu
}

// AddHasSpecies adds the "has_species" edges to the Species entity.
func (fu *FilmUpdate) AddHasSpecies(s ...*Species) *FilmUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddHasSpecyIDs(ids...)
}

// Mutation returns the FilmMutation object of the builder.
func (fu *FilmUpdate) Mutation() *FilmMutation {
	return fu.mutation
}

// ClearHasPerson clears all "has_person" edges to the Person entity.
func (fu *FilmUpdate) ClearHasPerson() *FilmUpdate {
	fu.mutation.ClearHasPerson()
	return fu
}

// RemoveHasPersonIDs removes the "has_person" edge to Person entities by IDs.
func (fu *FilmUpdate) RemoveHasPersonIDs(ids ...int) *FilmUpdate {
	fu.mutation.RemoveHasPersonIDs(ids...)
	return fu
}

// RemoveHasPerson removes "has_person" edges to Person entities.
func (fu *FilmUpdate) RemoveHasPerson(p ...*Person) *FilmUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveHasPersonIDs(ids...)
}

// ClearHasPlanet clears all "has_planet" edges to the Planet entity.
func (fu *FilmUpdate) ClearHasPlanet() *FilmUpdate {
	fu.mutation.ClearHasPlanet()
	return fu
}

// RemoveHasPlanetIDs removes the "has_planet" edge to Planet entities by IDs.
func (fu *FilmUpdate) RemoveHasPlanetIDs(ids ...int) *FilmUpdate {
	fu.mutation.RemoveHasPlanetIDs(ids...)
	return fu
}

// RemoveHasPlanet removes "has_planet" edges to Planet entities.
func (fu *FilmUpdate) RemoveHasPlanet(p ...*Planet) *FilmUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveHasPlanetIDs(ids...)
}

// ClearHasStarship clears all "has_starship" edges to the Starship entity.
func (fu *FilmUpdate) ClearHasStarship() *FilmUpdate {
	fu.mutation.ClearHasStarship()
	return fu
}

// RemoveHasStarshipIDs removes the "has_starship" edge to Starship entities by IDs.
func (fu *FilmUpdate) RemoveHasStarshipIDs(ids ...int) *FilmUpdate {
	fu.mutation.RemoveHasStarshipIDs(ids...)
	return fu
}

// RemoveHasStarship removes "has_starship" edges to Starship entities.
func (fu *FilmUpdate) RemoveHasStarship(s ...*Starship) *FilmUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveHasStarshipIDs(ids...)
}

// ClearHasVehicle clears all "has_vehicle" edges to the Vehicle entity.
func (fu *FilmUpdate) ClearHasVehicle() *FilmUpdate {
	fu.mutation.ClearHasVehicle()
	return fu
}

// RemoveHasVehicleIDs removes the "has_vehicle" edge to Vehicle entities by IDs.
func (fu *FilmUpdate) RemoveHasVehicleIDs(ids ...int) *FilmUpdate {
	fu.mutation.RemoveHasVehicleIDs(ids...)
	return fu
}

// RemoveHasVehicle removes "has_vehicle" edges to Vehicle entities.
func (fu *FilmUpdate) RemoveHasVehicle(v ...*Vehicle) *FilmUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fu.RemoveHasVehicleIDs(ids...)
}

// ClearHasSpecies clears all "has_species" edges to the Species entity.
func (fu *FilmUpdate) ClearHasSpecies() *FilmUpdate {
	fu.mutation.ClearHasSpecies()
	return fu
}

// RemoveHasSpecyIDs removes the "has_species" edge to Species entities by IDs.
func (fu *FilmUpdate) RemoveHasSpecyIDs(ids ...int) *FilmUpdate {
	fu.mutation.RemoveHasSpecyIDs(ids...)
	return fu
}

// RemoveHasSpecies removes "has_species" edges to Species entities.
func (fu *FilmUpdate) RemoveHasSpecies(s ...*Species) *FilmUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveHasSpecyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilmUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilmUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilmUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilmUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FilmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   film.Table,
			Columns: film.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: film.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Director(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldDirector,
		})
	}
	if value, ok := fu.mutation.EpisodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: film.FieldEpisodeID,
		})
	}
	if value, ok := fu.mutation.AddedEpisodeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: film.FieldEpisodeID,
		})
	}
	if value, ok := fu.mutation.OpeningCrawl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldOpeningCrawl,
		})
	}
	if value, ok := fu.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldProducer,
		})
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldTitle,
		})
	}
	if fu.mutation.HasPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHasPersonIDs(); len(nodes) > 0 && !fu.mutation.HasPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.HasPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHasPlanetIDs(); len(nodes) > 0 && !fu.mutation.HasPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasPlanetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.HasStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHasStarshipIDs(); len(nodes) > 0 && !fu.mutation.HasStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasStarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.HasVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHasVehicleIDs(); len(nodes) > 0 && !fu.mutation.HasVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasVehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.HasSpeciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHasSpeciesIDs(); len(nodes) > 0 && !fu.mutation.HasSpeciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasSpeciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{film.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FilmUpdateOne is the builder for updating a single Film entity.
type FilmUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilmMutation
}

// SetDirector sets the "director" field.
func (fuo *FilmUpdateOne) SetDirector(s string) *FilmUpdateOne {
	fuo.mutation.SetDirector(s)
	return fuo
}

// SetEpisodeID sets the "episode_id" field.
func (fuo *FilmUpdateOne) SetEpisodeID(i int) *FilmUpdateOne {
	fuo.mutation.ResetEpisodeID()
	fuo.mutation.SetEpisodeID(i)
	return fuo
}

// AddEpisodeID adds i to the "episode_id" field.
func (fuo *FilmUpdateOne) AddEpisodeID(i int) *FilmUpdateOne {
	fuo.mutation.AddEpisodeID(i)
	return fuo
}

// SetOpeningCrawl sets the "opening_crawl" field.
func (fuo *FilmUpdateOne) SetOpeningCrawl(s string) *FilmUpdateOne {
	fuo.mutation.SetOpeningCrawl(s)
	return fuo
}

// SetProducer sets the "producer" field.
func (fuo *FilmUpdateOne) SetProducer(s string) *FilmUpdateOne {
	fuo.mutation.SetProducer(s)
	return fuo
}

// SetTitle sets the "title" field.
func (fuo *FilmUpdateOne) SetTitle(s string) *FilmUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// AddHasPersonIDs adds the "has_person" edge to the Person entity by IDs.
func (fuo *FilmUpdateOne) AddHasPersonIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.AddHasPersonIDs(ids...)
	return fuo
}

// AddHasPerson adds the "has_person" edges to the Person entity.
func (fuo *FilmUpdateOne) AddHasPerson(p ...*Person) *FilmUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddHasPersonIDs(ids...)
}

// AddHasPlanetIDs adds the "has_planet" edge to the Planet entity by IDs.
func (fuo *FilmUpdateOne) AddHasPlanetIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.AddHasPlanetIDs(ids...)
	return fuo
}

// AddHasPlanet adds the "has_planet" edges to the Planet entity.
func (fuo *FilmUpdateOne) AddHasPlanet(p ...*Planet) *FilmUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddHasPlanetIDs(ids...)
}

// AddHasStarshipIDs adds the "has_starship" edge to the Starship entity by IDs.
func (fuo *FilmUpdateOne) AddHasStarshipIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.AddHasStarshipIDs(ids...)
	return fuo
}

// AddHasStarship adds the "has_starship" edges to the Starship entity.
func (fuo *FilmUpdateOne) AddHasStarship(s ...*Starship) *FilmUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddHasStarshipIDs(ids...)
}

// AddHasVehicleIDs adds the "has_vehicle" edge to the Vehicle entity by IDs.
func (fuo *FilmUpdateOne) AddHasVehicleIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.AddHasVehicleIDs(ids...)
	return fuo
}

// AddHasVehicle adds the "has_vehicle" edges to the Vehicle entity.
func (fuo *FilmUpdateOne) AddHasVehicle(v ...*Vehicle) *FilmUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fuo.AddHasVehicleIDs(ids...)
}

// AddHasSpecyIDs adds the "has_species" edge to the Species entity by IDs.
func (fuo *FilmUpdateOne) AddHasSpecyIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.AddHasSpecyIDs(ids...)
	return fuo
}

// AddHasSpecies adds the "has_species" edges to the Species entity.
func (fuo *FilmUpdateOne) AddHasSpecies(s ...*Species) *FilmUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddHasSpecyIDs(ids...)
}

// Mutation returns the FilmMutation object of the builder.
func (fuo *FilmUpdateOne) Mutation() *FilmMutation {
	return fuo.mutation
}

// ClearHasPerson clears all "has_person" edges to the Person entity.
func (fuo *FilmUpdateOne) ClearHasPerson() *FilmUpdateOne {
	fuo.mutation.ClearHasPerson()
	return fuo
}

// RemoveHasPersonIDs removes the "has_person" edge to Person entities by IDs.
func (fuo *FilmUpdateOne) RemoveHasPersonIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.RemoveHasPersonIDs(ids...)
	return fuo
}

// RemoveHasPerson removes "has_person" edges to Person entities.
func (fuo *FilmUpdateOne) RemoveHasPerson(p ...*Person) *FilmUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveHasPersonIDs(ids...)
}

// ClearHasPlanet clears all "has_planet" edges to the Planet entity.
func (fuo *FilmUpdateOne) ClearHasPlanet() *FilmUpdateOne {
	fuo.mutation.ClearHasPlanet()
	return fuo
}

// RemoveHasPlanetIDs removes the "has_planet" edge to Planet entities by IDs.
func (fuo *FilmUpdateOne) RemoveHasPlanetIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.RemoveHasPlanetIDs(ids...)
	return fuo
}

// RemoveHasPlanet removes "has_planet" edges to Planet entities.
func (fuo *FilmUpdateOne) RemoveHasPlanet(p ...*Planet) *FilmUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveHasPlanetIDs(ids...)
}

// ClearHasStarship clears all "has_starship" edges to the Starship entity.
func (fuo *FilmUpdateOne) ClearHasStarship() *FilmUpdateOne {
	fuo.mutation.ClearHasStarship()
	return fuo
}

// RemoveHasStarshipIDs removes the "has_starship" edge to Starship entities by IDs.
func (fuo *FilmUpdateOne) RemoveHasStarshipIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.RemoveHasStarshipIDs(ids...)
	return fuo
}

// RemoveHasStarship removes "has_starship" edges to Starship entities.
func (fuo *FilmUpdateOne) RemoveHasStarship(s ...*Starship) *FilmUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveHasStarshipIDs(ids...)
}

// ClearHasVehicle clears all "has_vehicle" edges to the Vehicle entity.
func (fuo *FilmUpdateOne) ClearHasVehicle() *FilmUpdateOne {
	fuo.mutation.ClearHasVehicle()
	return fuo
}

// RemoveHasVehicleIDs removes the "has_vehicle" edge to Vehicle entities by IDs.
func (fuo *FilmUpdateOne) RemoveHasVehicleIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.RemoveHasVehicleIDs(ids...)
	return fuo
}

// RemoveHasVehicle removes "has_vehicle" edges to Vehicle entities.
func (fuo *FilmUpdateOne) RemoveHasVehicle(v ...*Vehicle) *FilmUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fuo.RemoveHasVehicleIDs(ids...)
}

// ClearHasSpecies clears all "has_species" edges to the Species entity.
func (fuo *FilmUpdateOne) ClearHasSpecies() *FilmUpdateOne {
	fuo.mutation.ClearHasSpecies()
	return fuo
}

// RemoveHasSpecyIDs removes the "has_species" edge to Species entities by IDs.
func (fuo *FilmUpdateOne) RemoveHasSpecyIDs(ids ...int) *FilmUpdateOne {
	fuo.mutation.RemoveHasSpecyIDs(ids...)
	return fuo
}

// RemoveHasSpecies removes "has_species" edges to Species entities.
func (fuo *FilmUpdateOne) RemoveHasSpecies(s ...*Species) *FilmUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveHasSpecyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilmUpdateOne) Select(field string, fields ...string) *FilmUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Film entity.
func (fuo *FilmUpdateOne) Save(ctx context.Context) (*Film, error) {
	var (
		err  error
		node *Film
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilmUpdateOne) SaveX(ctx context.Context) *Film {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilmUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilmUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FilmUpdateOne) sqlSave(ctx context.Context) (_node *Film, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   film.Table,
			Columns: film.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: film.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Film.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, film.FieldID)
		for _, f := range fields {
			if !film.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != film.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Director(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldDirector,
		})
	}
	if value, ok := fuo.mutation.EpisodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: film.FieldEpisodeID,
		})
	}
	if value, ok := fuo.mutation.AddedEpisodeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: film.FieldEpisodeID,
		})
	}
	if value, ok := fuo.mutation.OpeningCrawl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldOpeningCrawl,
		})
	}
	if value, ok := fuo.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldProducer,
		})
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldTitle,
		})
	}
	if fuo.mutation.HasPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHasPersonIDs(); len(nodes) > 0 && !fuo.mutation.HasPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPersonTable,
			Columns: film.HasPersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.HasPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHasPlanetIDs(); len(nodes) > 0 && !fuo.mutation.HasPlanetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasPlanetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasPlanetTable,
			Columns: film.HasPlanetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.HasStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHasStarshipIDs(); len(nodes) > 0 && !fuo.mutation.HasStarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasStarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasStarshipTable,
			Columns: film.HasStarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: starship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.HasVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHasVehicleIDs(); len(nodes) > 0 && !fuo.mutation.HasVehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasVehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasVehicleTable,
			Columns: film.HasVehiclePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.HasSpeciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHasSpeciesIDs(); len(nodes) > 0 && !fuo.mutation.HasSpeciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasSpeciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.HasSpeciesTable,
			Columns: film.HasSpeciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: species.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Film{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{film.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
