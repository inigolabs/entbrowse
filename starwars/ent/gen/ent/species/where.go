// Code generated by entc, DO NOT EDIT.

package species

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/inigolabs/entbrowse/starwars/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AverageHeight applies equality check predicate on the "average_height" field. It's identical to AverageHeightEQ.
func AverageHeight(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageHeight), v))
	})
}

// AverageLifespan applies equality check predicate on the "average_lifespan" field. It's identical to AverageLifespanEQ.
func AverageLifespan(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageLifespan), v))
	})
}

// Classification applies equality check predicate on the "classification" field. It's identical to ClassificationEQ.
func Classification(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassification), v))
	})
}

// Designation applies equality check predicate on the "designation" field. It's identical to DesignationEQ.
func Designation(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesignation), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// SkinColor applies equality check predicate on the "skin_color" field. It's identical to SkinColorEQ.
func SkinColor(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkinColor), v))
	})
}

// EyeColor applies equality check predicate on the "eye_color" field. It's identical to EyeColorEQ.
func EyeColor(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEyeColor), v))
	})
}

// HairColor applies equality check predicate on the "hair_color" field. It's identical to HairColorEQ.
func HairColor(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColor), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// AverageHeightEQ applies the EQ predicate on the "average_height" field.
func AverageHeightEQ(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageHeight), v))
	})
}

// AverageHeightNEQ applies the NEQ predicate on the "average_height" field.
func AverageHeightNEQ(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAverageHeight), v))
	})
}

// AverageHeightIn applies the In predicate on the "average_height" field.
func AverageHeightIn(vs ...int) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAverageHeight), v...))
	})
}

// AverageHeightNotIn applies the NotIn predicate on the "average_height" field.
func AverageHeightNotIn(vs ...int) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAverageHeight), v...))
	})
}

// AverageHeightGT applies the GT predicate on the "average_height" field.
func AverageHeightGT(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAverageHeight), v))
	})
}

// AverageHeightGTE applies the GTE predicate on the "average_height" field.
func AverageHeightGTE(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAverageHeight), v))
	})
}

// AverageHeightLT applies the LT predicate on the "average_height" field.
func AverageHeightLT(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAverageHeight), v))
	})
}

// AverageHeightLTE applies the LTE predicate on the "average_height" field.
func AverageHeightLTE(v int) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAverageHeight), v))
	})
}

// AverageLifespanEQ applies the EQ predicate on the "average_lifespan" field.
func AverageLifespanEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanNEQ applies the NEQ predicate on the "average_lifespan" field.
func AverageLifespanNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanIn applies the In predicate on the "average_lifespan" field.
func AverageLifespanIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAverageLifespan), v...))
	})
}

// AverageLifespanNotIn applies the NotIn predicate on the "average_lifespan" field.
func AverageLifespanNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAverageLifespan), v...))
	})
}

// AverageLifespanGT applies the GT predicate on the "average_lifespan" field.
func AverageLifespanGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanGTE applies the GTE predicate on the "average_lifespan" field.
func AverageLifespanGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanLT applies the LT predicate on the "average_lifespan" field.
func AverageLifespanLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanLTE applies the LTE predicate on the "average_lifespan" field.
func AverageLifespanLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanContains applies the Contains predicate on the "average_lifespan" field.
func AverageLifespanContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanHasPrefix applies the HasPrefix predicate on the "average_lifespan" field.
func AverageLifespanHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanHasSuffix applies the HasSuffix predicate on the "average_lifespan" field.
func AverageLifespanHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanEqualFold applies the EqualFold predicate on the "average_lifespan" field.
func AverageLifespanEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAverageLifespan), v))
	})
}

// AverageLifespanContainsFold applies the ContainsFold predicate on the "average_lifespan" field.
func AverageLifespanContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAverageLifespan), v))
	})
}

// ClassificationEQ applies the EQ predicate on the "classification" field.
func ClassificationEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassification), v))
	})
}

// ClassificationNEQ applies the NEQ predicate on the "classification" field.
func ClassificationNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassification), v))
	})
}

// ClassificationIn applies the In predicate on the "classification" field.
func ClassificationIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassification), v...))
	})
}

// ClassificationNotIn applies the NotIn predicate on the "classification" field.
func ClassificationNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassification), v...))
	})
}

// ClassificationGT applies the GT predicate on the "classification" field.
func ClassificationGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassification), v))
	})
}

// ClassificationGTE applies the GTE predicate on the "classification" field.
func ClassificationGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassification), v))
	})
}

// ClassificationLT applies the LT predicate on the "classification" field.
func ClassificationLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassification), v))
	})
}

// ClassificationLTE applies the LTE predicate on the "classification" field.
func ClassificationLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassification), v))
	})
}

// ClassificationContains applies the Contains predicate on the "classification" field.
func ClassificationContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassification), v))
	})
}

// ClassificationHasPrefix applies the HasPrefix predicate on the "classification" field.
func ClassificationHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassification), v))
	})
}

// ClassificationHasSuffix applies the HasSuffix predicate on the "classification" field.
func ClassificationHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassification), v))
	})
}

// ClassificationEqualFold applies the EqualFold predicate on the "classification" field.
func ClassificationEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassification), v))
	})
}

// ClassificationContainsFold applies the ContainsFold predicate on the "classification" field.
func ClassificationContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassification), v))
	})
}

// DesignationEQ applies the EQ predicate on the "designation" field.
func DesignationEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesignation), v))
	})
}

// DesignationNEQ applies the NEQ predicate on the "designation" field.
func DesignationNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesignation), v))
	})
}

// DesignationIn applies the In predicate on the "designation" field.
func DesignationIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesignation), v...))
	})
}

// DesignationNotIn applies the NotIn predicate on the "designation" field.
func DesignationNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesignation), v...))
	})
}

// DesignationGT applies the GT predicate on the "designation" field.
func DesignationGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesignation), v))
	})
}

// DesignationGTE applies the GTE predicate on the "designation" field.
func DesignationGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesignation), v))
	})
}

// DesignationLT applies the LT predicate on the "designation" field.
func DesignationLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesignation), v))
	})
}

// DesignationLTE applies the LTE predicate on the "designation" field.
func DesignationLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesignation), v))
	})
}

// DesignationContains applies the Contains predicate on the "designation" field.
func DesignationContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesignation), v))
	})
}

// DesignationHasPrefix applies the HasPrefix predicate on the "designation" field.
func DesignationHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesignation), v))
	})
}

// DesignationHasSuffix applies the HasSuffix predicate on the "designation" field.
func DesignationHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesignation), v))
	})
}

// DesignationEqualFold applies the EqualFold predicate on the "designation" field.
func DesignationEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesignation), v))
	})
}

// DesignationContainsFold applies the ContainsFold predicate on the "designation" field.
func DesignationContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesignation), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SkinColorEQ applies the EQ predicate on the "skin_color" field.
func SkinColorEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkinColor), v))
	})
}

// SkinColorNEQ applies the NEQ predicate on the "skin_color" field.
func SkinColorNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSkinColor), v))
	})
}

// SkinColorIn applies the In predicate on the "skin_color" field.
func SkinColorIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSkinColor), v...))
	})
}

// SkinColorNotIn applies the NotIn predicate on the "skin_color" field.
func SkinColorNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSkinColor), v...))
	})
}

// SkinColorGT applies the GT predicate on the "skin_color" field.
func SkinColorGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSkinColor), v))
	})
}

// SkinColorGTE applies the GTE predicate on the "skin_color" field.
func SkinColorGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSkinColor), v))
	})
}

// SkinColorLT applies the LT predicate on the "skin_color" field.
func SkinColorLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSkinColor), v))
	})
}

// SkinColorLTE applies the LTE predicate on the "skin_color" field.
func SkinColorLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSkinColor), v))
	})
}

// SkinColorContains applies the Contains predicate on the "skin_color" field.
func SkinColorContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSkinColor), v))
	})
}

// SkinColorHasPrefix applies the HasPrefix predicate on the "skin_color" field.
func SkinColorHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSkinColor), v))
	})
}

// SkinColorHasSuffix applies the HasSuffix predicate on the "skin_color" field.
func SkinColorHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSkinColor), v))
	})
}

// SkinColorEqualFold applies the EqualFold predicate on the "skin_color" field.
func SkinColorEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSkinColor), v))
	})
}

// SkinColorContainsFold applies the ContainsFold predicate on the "skin_color" field.
func SkinColorContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSkinColor), v))
	})
}

// EyeColorEQ applies the EQ predicate on the "eye_color" field.
func EyeColorEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEyeColor), v))
	})
}

// EyeColorNEQ applies the NEQ predicate on the "eye_color" field.
func EyeColorNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEyeColor), v))
	})
}

// EyeColorIn applies the In predicate on the "eye_color" field.
func EyeColorIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEyeColor), v...))
	})
}

// EyeColorNotIn applies the NotIn predicate on the "eye_color" field.
func EyeColorNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEyeColor), v...))
	})
}

// EyeColorGT applies the GT predicate on the "eye_color" field.
func EyeColorGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEyeColor), v))
	})
}

// EyeColorGTE applies the GTE predicate on the "eye_color" field.
func EyeColorGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEyeColor), v))
	})
}

// EyeColorLT applies the LT predicate on the "eye_color" field.
func EyeColorLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEyeColor), v))
	})
}

// EyeColorLTE applies the LTE predicate on the "eye_color" field.
func EyeColorLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEyeColor), v))
	})
}

// EyeColorContains applies the Contains predicate on the "eye_color" field.
func EyeColorContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEyeColor), v))
	})
}

// EyeColorHasPrefix applies the HasPrefix predicate on the "eye_color" field.
func EyeColorHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEyeColor), v))
	})
}

// EyeColorHasSuffix applies the HasSuffix predicate on the "eye_color" field.
func EyeColorHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEyeColor), v))
	})
}

// EyeColorEqualFold applies the EqualFold predicate on the "eye_color" field.
func EyeColorEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEyeColor), v))
	})
}

// EyeColorContainsFold applies the ContainsFold predicate on the "eye_color" field.
func EyeColorContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEyeColor), v))
	})
}

// HairColorEQ applies the EQ predicate on the "hair_color" field.
func HairColorEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColor), v))
	})
}

// HairColorNEQ applies the NEQ predicate on the "hair_color" field.
func HairColorNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHairColor), v))
	})
}

// HairColorIn applies the In predicate on the "hair_color" field.
func HairColorIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHairColor), v...))
	})
}

// HairColorNotIn applies the NotIn predicate on the "hair_color" field.
func HairColorNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHairColor), v...))
	})
}

// HairColorGT applies the GT predicate on the "hair_color" field.
func HairColorGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHairColor), v))
	})
}

// HairColorGTE applies the GTE predicate on the "hair_color" field.
func HairColorGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHairColor), v))
	})
}

// HairColorLT applies the LT predicate on the "hair_color" field.
func HairColorLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHairColor), v))
	})
}

// HairColorLTE applies the LTE predicate on the "hair_color" field.
func HairColorLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHairColor), v))
	})
}

// HairColorContains applies the Contains predicate on the "hair_color" field.
func HairColorContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHairColor), v))
	})
}

// HairColorHasPrefix applies the HasPrefix predicate on the "hair_color" field.
func HairColorHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHairColor), v))
	})
}

// HairColorHasSuffix applies the HasSuffix predicate on the "hair_color" field.
func HairColorHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHairColor), v))
	})
}

// HairColorEqualFold applies the EqualFold predicate on the "hair_color" field.
func HairColorEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHairColor), v))
	})
}

// HairColorContainsFold applies the ContainsFold predicate on the "hair_color" field.
func HairColorContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHairColor), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Species {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Species(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// HasOriginatesFrom applies the HasEdge predicate on the "originates_from" edge.
func HasOriginatesFrom() predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginatesFromTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OriginatesFromTable, OriginatesFromPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginatesFromWith applies the HasEdge predicate on the "originates_from" edge with a given conditions (other predicates).
func HasOriginatesFromWith(preds ...predicate.Planet) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginatesFromInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OriginatesFromTable, OriginatesFromPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppearedIn applies the HasEdge predicate on the "appeared_in" edge.
func HasAppearedIn() predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppearedInTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppearedInTable, AppearedInPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppearedInWith applies the HasEdge predicate on the "appeared_in" edge with a given conditions (other predicates).
func HasAppearedInWith(preds ...predicate.Film) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppearedInInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppearedInTable, AppearedInPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncludesPerson applies the HasEdge predicate on the "includes_person" edge.
func HasIncludesPerson() predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IncludesPersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncludesPersonTable, IncludesPersonPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncludesPersonWith applies the HasEdge predicate on the "includes_person" edge with a given conditions (other predicates).
func HasIncludesPersonWith(preds ...predicate.Person) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IncludesPersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncludesPersonTable, IncludesPersonPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Species) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Species) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Species) predicate.Species {
	return predicate.Species(func(s *sql.Selector) {
		p(s.Not())
	})
}
